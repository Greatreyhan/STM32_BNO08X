
STM32_BNO08X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc8  08008bc8  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd0  08008bd0  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08008bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001654  2000014c  08008d24  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a0  08008d24  000217a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fde  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003187  00000000  00000000  0003219d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab9  00000000  00000000  00036160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184b8  00000000  00000000  00036c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123ab  00000000  00000000  0004f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000892b7  00000000  00000000  0006147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb0  00000000  00000000  000ea734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ee5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008adc 	.word	0x08008adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008adc 	.word	0x08008adc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_UART_RxHalfCpltCallback>:
char concatBuffer[50];
char *char_roll = "roll\n";
char *char_pitch = "pitch \n";
char *char_yaw = "yaw \n";
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);  // toggle PA0
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <HAL_UART_RxHalfCpltCallback+0x1c>)
 800059a:	f001 f9e6 	bl	800196a <HAL_GPIO_TogglePin>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020800 	.word	0x40020800

080005ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
  parseSensorData(RX_Data, &sensordata);
 80005b4:	4914      	ldr	r1, [pc, #80]	; (8000608 <HAL_UART_RxCpltCallback+0x5c>)
 80005b6:	4815      	ldr	r0, [pc, #84]	; (800060c <HAL_UART_RxCpltCallback+0x60>)
 80005b8:	f000 f94e 	bl	8000858 <parseSensorData>
  snprintf(concatBuffer, sizeof(concatBuffer), "roll: %d | pitch : %d | yaw : %d\n", sensordata.roll, sensordata.pitch, sensordata.yaw);
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_UART_RxCpltCallback+0x5c>)
 80005be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <HAL_UART_RxCpltCallback+0x5c>)
 80005c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_UART_RxCpltCallback+0x5c>)
 80005ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	460b      	mov	r3, r1
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <HAL_UART_RxCpltCallback+0x64>)
 80005da:	2132      	movs	r1, #50	; 0x32
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <HAL_UART_RxCpltCallback+0x68>)
 80005de:	f007 fdc5 	bl	800816c <sniprintf>
  CDC_Transmit_FS((uint8_t*)concatBuffer, strlen(concatBuffer));
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <HAL_UART_RxCpltCallback+0x68>)
 80005e4:	f7ff fdfc 	bl	80001e0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <HAL_UART_RxCpltCallback+0x68>)
 80005f0:	f007 f96a 	bl	80078c8 <CDC_Transmit_FS>
  HAL_UART_Receive_DMA(&huart1, RX_Data, sizeof(RX_Data));
 80005f4:	2213      	movs	r2, #19
 80005f6:	4905      	ldr	r1, [pc, #20]	; (800060c <HAL_UART_RxCpltCallback+0x60>)
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <HAL_UART_RxCpltCallback+0x6c>)
 80005fa:	f003 f8c9 	bl	8003790 <HAL_UART_Receive_DMA>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000224 	.word	0x20000224
 800060c:	20000210 	.word	0x20000210
 8000610:	08008b0c 	.word	0x08008b0c
 8000614:	20000238 	.word	0x20000238
 8000618:	20000168 	.word	0x20000168

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 faee 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f812 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8c4 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800062c:	f000 f8a2 	bl	8000774 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f876 	bl	8000720 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000634:	f007 f88a 	bl	800774c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart1, RX_Data, sizeof(RX_Data));
 8000638:	2213      	movs	r2, #19
 800063a:	4902      	ldr	r1, [pc, #8]	; (8000644 <main+0x28>)
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <main+0x2c>)
 800063e:	f003 f8a7 	bl	8003790 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x26>
 8000644:	20000210 	.word	0x20000210
 8000648:	20000168 	.word	0x20000168

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 fdba 	bl	80081d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a20      	ldr	r2, [pc, #128]	; (800071c <SystemClock_Config+0xd0>)
 800069a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006c0:	230f      	movs	r3, #15
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006cc:	2305      	movs	r3, #5
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fbb3 	bl	8002e40 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 f934 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fe15 	bl	8003330 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800070c:	f000 f91e 	bl	800094c <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f002 ffca 	bl	80036f0 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8f3 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000168 	.word	0x20000168
 8000770:	40011000 	.word	0x40011000

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <MX_DMA_Init+0x3c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_DMA_Init+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	203a      	movs	r0, #58	; 0x3a
 800079c:	f000 fba1 	bl	8000ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007a0:	203a      	movs	r0, #58	; 0x3a
 80007a2:	f000 fbba 	bl	8000f1a <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_GPIO_Init+0x9c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_GPIO_Init+0x9c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0x9c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0xa0>)
 8000826:	f001 f887 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800082a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xa0>)
 8000844:	f000 fef4 	bl	8001630 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800

08000858 <parseSensorData>:

/* USER CODE BEGIN 4 */
void parseSensorData(uint8_t *data, SensorData *sensorData) {
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    sensorData->header = data[0];
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	701a      	strb	r2, [r3, #0]
    sensorData->index = data[2];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	789a      	ldrb	r2, [r3, #2]
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((data[4] << 8) | data[3]);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3304      	adds	r3, #4
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	b21a      	sxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3303      	adds	r3, #3
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21a      	sxth	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((data[6] << 8) | data[5]);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3306      	adds	r3, #6
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3305      	adds	r3, #5
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((data[8] << 8) | data[7]);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3308      	adds	r3, #8
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3307      	adds	r3, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((data[10] << 8) | data[9]);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	330a      	adds	r3, #10
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3309      	adds	r3, #9
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((data[12] << 8) | data[11]);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	330c      	adds	r3, #12
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	330b      	adds	r3, #11
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((data[14] << 8) | data[13]);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	330e      	adds	r3, #14
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	330d      	adds	r3, #13
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21a      	sxth	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e00e      	b.n	8000932 <parseSensorData+0xda>
        sensorData->mi_mr_reserved[i] = data[15 + i];
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	330f      	adds	r3, #15
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	7819      	ldrb	r1, [r3, #0]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	330e      	adds	r3, #14
 8000928:	460a      	mov	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b02      	cmp	r3, #2
 8000936:	dded      	ble.n	8000914 <parseSensorData+0xbc>
    }

    sensorData->checksum = data[18];
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7c9a      	ldrb	r2, [r3, #18]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	745a      	strb	r2, [r3, #17]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <HAL_UART_MspInit+0xe4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d15b      	bne.n	8000a82 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a20:	f000 fe06 	bl	8001630 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a26:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 8000a28:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a58:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a68:	f000 fa72 	bl	8000f50 <HAL_DMA_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a72:	f7ff ff6b 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	200001b0 	.word	0x200001b0
 8000a9c:	40026440 	.word	0x40026440

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f8da 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA2_Stream2_IRQHandler+0x10>)
 8000afa:	f000 fb2f 	bl	800115c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001b0 	.word	0x200001b0

08000b08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <OTG_FS_IRQHandler+0x10>)
 8000b0e:	f001 f88a 	bl	8001c26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000f54 	.word	0x20000f54

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f007 fb4a 	bl	80081e4 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20010000 	.word	0x20010000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	2000026c 	.word	0x2000026c
 8000b84:	200017a0 	.word	0x200017a0

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f007 fb09 	bl	80081f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd1d 	bl	800061c <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000bf0:	08008bd8 	.word	0x08008bd8
  ldr r2, =_sbss
 8000bf4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000bf8:	200017a0 	.word	0x200017a0

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f94f 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe90 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f967 	bl	8000f36 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	f000 f92f 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000270 	.word	0x20000270

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000270 	.word	0x20000270

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff3e 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff31 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffa2 	bl	8000e88 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff feb6 	bl	8000ccc <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e099      	b.n	80010a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	e00f      	b.n	8000fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8e:	f7ff fe9d 	bl	8000ccc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d908      	bls.n	8000fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e078      	b.n	80010a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1e8      	bne.n	8000f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_DMA_Init+0x158>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	2b04      	cmp	r3, #4
 8001006:	d107      	bne.n	8001018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4313      	orrs	r3, r2
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4313      	orrs	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	4313      	orrs	r3, r2
 8001038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	2b04      	cmp	r3, #4
 8001040:	d117      	bne.n	8001072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00e      	beq.n	8001072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fa6f 	bl	8001538 <DMA_CheckFifoParam>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800106e:	2301      	movs	r3, #1
 8001070:	e016      	b.n	80010a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fa26 	bl	80014cc <DMA_CalcBaseAndBitshift>
 8001080:	4603      	mov	r3, r0
 8001082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	223f      	movs	r2, #63	; 0x3f
 800108a:	409a      	lsls	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	f010803f 	.word	0xf010803f

080010ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_DMA_Start_IT+0x26>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e040      	b.n	8001154 <HAL_DMA_Start_IT+0xa8>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d12f      	bne.n	8001146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2202      	movs	r2, #2
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f9b8 	bl	8001470 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	223f      	movs	r2, #63	; 0x3f
 8001106:	409a      	lsls	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0216 	orr.w	r2, r2, #22
 800111a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e005      	b.n	8001152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800114e:	2302      	movs	r3, #2
 8001150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001168:	4b8e      	ldr	r3, [pc, #568]	; (80013a4 <HAL_DMA_IRQHandler+0x248>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a8e      	ldr	r2, [pc, #568]	; (80013a8 <HAL_DMA_IRQHandler+0x24c>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0a9b      	lsrs	r3, r3, #10
 8001174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2208      	movs	r2, #8
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2208      	movs	r2, #8
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2201      	movs	r2, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2201      	movs	r2, #1
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	2204      	movs	r2, #4
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d012      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001220:	2204      	movs	r2, #4
 8001222:	409a      	lsls	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	2210      	movs	r2, #16
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d043      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03c      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2210      	movs	r2, #16
 8001258:	409a      	lsls	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d018      	beq.n	800129e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d024      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
 800128a:	e01f      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01b      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e016      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	2220      	movs	r2, #32
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 808f 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8087 	beq.w	80013fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	2220      	movs	r2, #32
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d136      	bne.n	8001374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0216 	bic.w	r2, r2, #22
 8001314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_DMA_IRQHandler+0x1da>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0208 	bic.w	r2, r2, #8
 8001344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	223f      	movs	r2, #63	; 0x3f
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	d07e      	beq.n	8001468 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
        }
        return;
 8001372:	e079      	b.n	8001468 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10d      	bne.n	80013ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	2b00      	cmp	r3, #0
 8001396:	d031      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	4798      	blx	r3
 80013a0:	e02c      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d023      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	4798      	blx	r3
 80013bc:	e01e      	b.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0210 	bic.w	r2, r2, #16
 80013da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d022      	beq.n	8001456 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	d307      	bcc.n	8001444 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_DMA_IRQHandler+0x2cc>
 8001442:	e000      	b.n	8001446 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001444:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
 8001466:	e000      	b.n	800146a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001468:	bf00      	nop
    }
  }
}
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800148c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	d108      	bne.n	80014b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ae:	e007      	b.n	80014c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	60da      	str	r2, [r3, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b10      	subs	r3, #16
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <DMA_CalcBaseAndBitshift+0x64>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <DMA_CalcBaseAndBitshift+0x68>)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d909      	bls.n	800150e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	1d1a      	adds	r2, r3, #4
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	659a      	str	r2, [r3, #88]	; 0x58
 800150c:	e007      	b.n	800151e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	aaaaaaab 	.word	0xaaaaaaab
 8001534:	08008b8c 	.word	0x08008b8c

08001538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11f      	bne.n	8001592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d856      	bhi.n	8001606 <DMA_CheckFifoParam+0xce>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <DMA_CheckFifoParam+0x28>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001571 	.word	0x08001571
 8001564:	08001583 	.word	0x08001583
 8001568:	08001571 	.word	0x08001571
 800156c:	08001607 	.word	0x08001607
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d046      	beq.n	800160a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001580:	e043      	b.n	800160a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800158a:	d140      	bne.n	800160e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001590:	e03d      	b.n	800160e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159a:	d121      	bne.n	80015e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d837      	bhi.n	8001612 <DMA_CheckFifoParam+0xda>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <DMA_CheckFifoParam+0x70>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015bf 	.word	0x080015bf
 80015b0:	080015b9 	.word	0x080015b9
 80015b4:	080015d1 	.word	0x080015d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      break;
 80015bc:	e030      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d025      	beq.n	8001616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ce:	e022      	b.n	8001616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015d8:	d11f      	bne.n	800161a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015de:	e01c      	b.n	800161a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d903      	bls.n	80015ee <DMA_CheckFifoParam+0xb6>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d003      	beq.n	80015f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015ec:	e018      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
      break;
 80015f2:	e015      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00e      	beq.n	800161e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
      break;
 8001604:	e00b      	b.n	800161e <DMA_CheckFifoParam+0xe6>
      break;
 8001606:	bf00      	nop
 8001608:	e00a      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;
 800160a:	bf00      	nop
 800160c:	e008      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;
 800160e:	bf00      	nop
 8001610:	e006      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
 8001614:	e004      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;   
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <DMA_CheckFifoParam+0xe8>
      break;
 800161e:	bf00      	nop
    }
  } 
  
  return status; 
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e159      	b.n	8001900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 8148 	bne.w	80018fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d005      	beq.n	8001682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167e:	2b02      	cmp	r3, #2
 8001680:	d130      	bne.n	80016e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d017      	beq.n	8001720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d123      	bne.n	8001774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a2 	beq.w	80018fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_GPIO_Init+0x2e8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a56      	ldr	r2, [pc, #344]	; (8001918 <HAL_GPIO_Init+0x2e8>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b54      	ldr	r3, [pc, #336]	; (8001918 <HAL_GPIO_Init+0x2e8>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d2:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_GPIO_Init+0x2ec>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a49      	ldr	r2, [pc, #292]	; (8001920 <HAL_GPIO_Init+0x2f0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x202>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2f4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x1fe>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_GPIO_Init+0x2f8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x1fa>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a46      	ldr	r2, [pc, #280]	; (800192c <HAL_GPIO_Init+0x2fc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x1f6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a45      	ldr	r2, [pc, #276]	; (8001930 <HAL_GPIO_Init+0x300>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x1f2>
 800181e:	2304      	movs	r3, #4
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001822:	2307      	movs	r3, #7
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x204>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x204>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001832:	2300      	movs	r3, #0
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_GPIO_Init+0x2ec>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_GPIO_Init+0x304>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a2f      	ldr	r2, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x304>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_GPIO_Init+0x304>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_GPIO_Init+0x304>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_GPIO_Init+0x304>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ca:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_GPIO_Init+0x304>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_GPIO_Init+0x304>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <HAL_GPIO_Init+0x304>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f aea2 	bls.w	800164c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43d9      	mvns	r1, r3
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	400b      	ands	r3, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af02      	add	r7, sp, #8
 80019a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e101      	b.n	8001bb4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f006 f8c4 	bl	8007b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019de:	d102      	bne.n	80019e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fcbb 	bl	8004366 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7c1a      	ldrb	r2, [r3, #16]
 80019f8:	f88d 2000 	strb.w	r2, [sp]
 80019fc:	3304      	adds	r3, #4
 80019fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a00:	f002 fb9a 	bl	8004138 <USB_CoreInit>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0ce      	b.n	8001bb4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fcb3 	bl	8004388 <USB_SetCurrentMode>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0bf      	b.n	8001bb4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e04a      	b.n	8001ad0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3315      	adds	r3, #21
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3314      	adds	r3, #20
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	b298      	uxth	r0, r3
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	332e      	adds	r3, #46	; 0x2e
 8001a76:	4602      	mov	r2, r0
 8001a78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3318      	adds	r3, #24
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	331c      	adds	r3, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	3320      	adds	r3, #32
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3324      	adds	r3, #36	; 0x24
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	3301      	adds	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3af      	bcc.n	8001a3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e044      	b.n	8001b6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	3301      	adds	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3b5      	bcc.n	8001ae0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7c1a      	ldrb	r2, [r3, #16]
 8001b7c:	f88d 2000 	strb.w	r2, [sp]
 8001b80:	3304      	adds	r3, #4
 8001b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b84:	f002 fc4c 	bl	8004420 <USB_DevInit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00c      	b.n	8001bb4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fc90 	bl	80054d2 <USB_DevDisconnect>

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_Start+0x1c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e022      	b.n	8001c1e <HAL_PCD_Start+0x62>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fb9d 	bl	8004344 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fc3e 	bl	8005490 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b08d      	sub	sp, #52	; 0x34
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fcfc 	bl	800563a <USB_GetMode>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 848c 	bne.w	8002562 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fc60 	bl	8005514 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8482 	beq.w	8002560 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fc4d 	bl	8005514 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d107      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 0202 	and.w	r2, r2, #2
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fc3b 	bl	8005514 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d161      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0210 	bic.w	r2, r2, #16
 8001cb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f003 020f 	and.w	r2, r3, #15
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	0c5b      	lsrs	r3, r3, #17
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d124      	bne.n	8001d2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d035      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	6a38      	ldr	r0, [r7, #32]
 8001d04:	f003 fa72 	bl	80051ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d14:	441a      	add	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d26:	441a      	add	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	e016      	b.n	8001d5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	0c5b      	lsrs	r3, r3, #17
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d110      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001d40:	2208      	movs	r2, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	6a38      	ldr	r0, [r7, #32]
 8001d46:	f003 fa51 	bl	80051ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d56:	441a      	add	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0210 	orr.w	r2, r2, #16
 8001d6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fbcf 	bl	8005514 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d80:	f040 80a7 	bne.w	8001ed2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fbd4 	bl	800553a <USB_ReadDevAllOutEpInterrupt>
 8001d92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d94:	e099      	b.n	8001eca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 808e 	beq.w	8001ebe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fbf8 	bl	80055a2 <USB_ReadDevOutEPInterrupt>
 8001db2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2301      	movs	r3, #1
 8001dce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fea2 	bl	8002b1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dee:	461a      	mov	r2, r3
 8001df0:	2308      	movs	r3, #8
 8001df2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 ff78 	bl	8002cec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d008      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e12:	461a      	mov	r2, r3
 8001e14:	2310      	movs	r3, #16
 8001e16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d030      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d109      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2200      	movs	r2, #0
 8001e64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f005 ff6f 	bl	8007d50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2302      	movs	r3, #2
 8001e82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ebc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f af62 	bne.w	8001d96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fb1c 	bl	8005514 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ee6:	f040 80db 	bne.w	80020a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fb3d 	bl	800556e <USB_ReadDevAllInEpInterrupt>
 8001ef4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001efa:	e0cd      	b.n	8002098 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80c2 	beq.w	800208c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fb63 	bl	80055de <USB_ReadDevInEPInterrupt>
 8001f18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d057      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69f9      	ldr	r1, [r7, #28]
 8001f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f44:	4013      	ands	r3, r2
 8001f46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f54:	461a      	mov	r2, r3
 8001f56:	2301      	movs	r3, #1
 8001f58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d132      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3320      	adds	r3, #32
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4403      	add	r3, r0
 8001f82:	331c      	adds	r3, #28
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4419      	add	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4403      	add	r3, r0
 8001f96:	3320      	adds	r3, #32
 8001f98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d113      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x3a2>
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3324      	adds	r3, #36	; 0x24
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d108      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	f003 fb6a 	bl	800569c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f005 fe43 	bl	8007c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fea:	461a      	mov	r2, r3
 8001fec:	2308      	movs	r3, #8
 8001fee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002006:	461a      	mov	r2, r3
 8002008:	2310      	movs	r3, #16
 800200a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002022:	461a      	mov	r2, r3
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d023      	beq.n	800207a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002034:	6a38      	ldr	r0, [r7, #32]
 8002036:	f002 fb57 	bl	80046e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	3310      	adds	r3, #16
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	78db      	ldrb	r3, [r3, #3]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d108      	bne.n	8002068 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4619      	mov	r1, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f005 fe86 	bl	8007d74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002074:	461a      	mov	r2, r3
 8002076:	2302      	movs	r3, #2
 8002078:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fcbb 	bl	8002a02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3301      	adds	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	2b00      	cmp	r3, #0
 800209c:	f47f af2e 	bne.w	8001efc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fa35 	bl	8005514 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b4:	d122      	bne.n	80020fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d108      	bne.n	80020e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020dc:	2100      	movs	r1, #0
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fea2 	bl	8002e28 <HAL_PCDEx_LPM_Callback>
 80020e4:	e002      	b.n	80020ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f005 fe24 	bl	8007d34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fa07 	bl	8005514 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002110:	d112      	bne.n	8002138 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f005 fde0 	bl	8007ce8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002136:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 f9e9 	bl	8005514 <USB_ReadInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214c:	f040 80b7 	bne.w	80022be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2110      	movs	r1, #16
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fabc 	bl	80046e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002174:	e046      	b.n	8002204 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002182:	461a      	mov	r2, r3
 8002184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002188:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b6:	461a      	mov	r2, r3
 80021b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	3301      	adds	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	461a      	mov	r2, r3
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	4293      	cmp	r3, r2
 800220e:	d3b2      	bcc.n	8002176 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800221e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002222:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7bdb      	ldrb	r3, [r3, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d016      	beq.n	800225a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223c:	f043 030b 	orr.w	r3, r3, #11
 8002240:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002252:	f043 030b 	orr.w	r3, r3, #11
 8002256:	6453      	str	r3, [r2, #68]	; 0x44
 8002258:	e015      	b.n	8002286 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800226c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002270:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002280:	f043 030b 	orr.w	r3, r3, #11
 8002284:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002294:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002298:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022a8:	461a      	mov	r2, r3
 80022aa:	f003 f9f7 	bl	800569c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f926 	bl	8005514 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d123      	bne.n	800231c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 f9bc 	bl	8005656 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fa79 	bl	80047da <USB_GetDevSpeed>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681c      	ldr	r4, [r3, #0]
 80022f4:	f001 f9c8 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80022f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022fe:	461a      	mov	r2, r3
 8002300:	4620      	mov	r0, r4
 8002302:	f001 ff7d 	bl	8004200 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 fccf 	bl	8007caa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 f8f7 	bl	8005514 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b08      	cmp	r3, #8
 800232e:	d10a      	bne.n	8002346 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 fcac 	bl	8007c8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f002 0208 	and.w	r2, r2, #8
 8002344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f8e2 	bl	8005514 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b80      	cmp	r3, #128	; 0x80
 8002358:	d123      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e014      	b.n	8002396 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	b2db      	uxtb	r3, r3
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fb08 	bl	80029a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	4293      	cmp	r3, r2
 80023a0:	d3e4      	bcc.n	800236c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f8b4 	bl	8005514 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b6:	d13c      	bne.n	8002432 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b8:	2301      	movs	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e02b      	b.n	8002416 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3318      	adds	r3, #24
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d115      	bne.n	8002410 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da12      	bge.n	8002410 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3317      	adds	r3, #23
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fac8 	bl	80029a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3301      	adds	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	791b      	ldrb	r3, [r3, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	4293      	cmp	r3, r2
 8002420:	d3cd      	bcc.n	80023be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 f86c 	bl	8005514 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002446:	d156      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002448:	2301      	movs	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	e045      	b.n	80024da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d12e      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002476:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	da2b      	bge.n	80024d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002488:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800248c:	429a      	cmp	r2, r3
 800248e:	d121      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d0:	6053      	str	r3, [r2, #4]
            break;
 80024d2:	e008      	b.n	80024e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	3301      	adds	r3, #1
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	461a      	mov	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d3b3      	bcc.n	800244e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 f80a 	bl	8005514 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d10a      	bne.n	8002522 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f005 fc43 	bl	8007d98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f002 fff4 	bl	8005514 <USB_ReadInterrupts>
 800252c:	4603      	mov	r3, r0
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d115      	bne.n	8002562 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f005 fc33 	bl	8007db4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e000      	b.n	8002562 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002560:	bf00      	nop
    }
  }
}
 8002562:	3734      	adds	r7, #52	; 0x34
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}

08002568 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_PCD_SetAddress+0x1a>
 800257e:	2302      	movs	r3, #2
 8002580:	e012      	b.n	80025a8 <HAL_PCD_SetAddress+0x40>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f002 ff53 	bl	8005444 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	460b      	mov	r3, r1
 80025c4:	803b      	strh	r3, [r7, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da0f      	bge.n	80025f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	3310      	adds	r3, #16
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	705a      	strb	r2, [r3, #1]
 80025f4:	e00f      	b.n	8002616 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 020f 	and.w	r2, r3, #15
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002622:	883a      	ldrh	r2, [r7, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	78ba      	ldrb	r2, [r7, #2]
 800262c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002640:	78bb      	ldrb	r3, [r7, #2]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d102      	bne.n	800264c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_PCD_EP_Open+0xaa>
 8002656:	2302      	movs	r3, #2
 8002658:	e00e      	b.n	8002678 <HAL_PCD_EP_Open+0xc8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	4618      	mov	r0, r3
 800266a:	f002 f8db 	bl	8004824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002676:	7afb      	ldrb	r3, [r7, #11]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800268c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da0f      	bge.n	80026b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 020f 	and.w	r2, r3, #15
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	3310      	adds	r3, #16
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	705a      	strb	r2, [r3, #1]
 80026b2:	e00f      	b.n	80026d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	3304      	adds	r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_PCD_EP_Close+0x6e>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e00e      	b.n	800270c <HAL_PCD_EP_Close+0x8c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 f919 	bl	8004934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	460b      	mov	r3, r1
 8002722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	799b      	ldrb	r3, [r3, #6]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	799b      	ldrb	r3, [r3, #6]
 8002778:	461a      	mov	r2, r3
 800277a:	6979      	ldr	r1, [r7, #20]
 800277c:	f002 f9b6 	bl	8004aec <USB_EPStartXfer>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80027ac:	681b      	ldr	r3, [r3, #0]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	460b      	mov	r3, r1
 80027c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	3310      	adds	r3, #16
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	3304      	adds	r3, #4
 80027e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2201      	movs	r2, #1
 80027f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2da      	uxtb	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	799b      	ldrb	r3, [r3, #6]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d102      	bne.n	8002814 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	799b      	ldrb	r3, [r3, #6]
 800281c:	461a      	mov	r2, r3
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	f002 f964 	bl	8004aec <USB_EPStartXfer>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	7912      	ldrb	r2, [r2, #4]
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e04f      	b.n	80028ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800284c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da0f      	bge.n	8002874 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	3310      	adds	r3, #16
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	705a      	strb	r2, [r3, #1]
 8002872:	e00d      	b.n	8002890 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_PCD_EP_SetStall+0x82>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e01d      	b.n	80028ec <HAL_PCD_EP_SetStall+0xbe>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fcec 	bl	800529c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7999      	ldrb	r1, [r3, #6]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80028dc:	461a      	mov	r2, r3
 80028de:	f002 fedd 	bl	800569c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	7912      	ldrb	r2, [r2, #4]
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e042      	b.n	8002998 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da0f      	bge.n	800293a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 020f 	and.w	r2, r3, #15
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3310      	adds	r3, #16
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	e00f      	b.n	800295a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_PCD_EP_ClrStall+0x86>
 8002976:	2302      	movs	r3, #2
 8002978:	e00e      	b.n	8002998 <HAL_PCD_EP_ClrStall+0xa4>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fcf5 	bl	8005378 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	da0c      	bge.n	80029ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3310      	adds	r3, #16
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e00c      	b.n	80029e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fb14 	bl	800501c <USB_EPStopXfer>
 80029f4:	4603      	mov	r3, r0
 80029f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029f8:	7afb      	ldrb	r3, [r7, #11]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08a      	sub	sp, #40	; 0x28
 8002a06:	af02      	add	r7, sp, #8
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3310      	adds	r3, #16
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d901      	bls.n	8002a3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06b      	b.n	8002b12 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d902      	bls.n	8002a56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3303      	adds	r3, #3
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a5e:	e02a      	b.n	8002ab6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d902      	bls.n	8002a7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3303      	adds	r3, #3
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4603      	mov	r3, r0
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f002 fb69 	bl	8005170 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	441a      	add	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d809      	bhi.n	8002ae0 <PCD_WriteEmptyTxFifo+0xde>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d203      	bcs.n	8002ae0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1bf      	bne.n	8002a60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d811      	bhi.n	8002b10 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	2201      	movs	r2, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	6939      	ldr	r1, [r7, #16]
 8002b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	333c      	adds	r3, #60	; 0x3c
 8002b34:	3304      	adds	r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d17b      	bne.n	8002c4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4a61      	ldr	r2, [pc, #388]	; (8002ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f240 80b9 	bls.w	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80b3 	beq.w	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b84:	6093      	str	r3, [r2, #8]
 8002b86:	e0a7      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	e098      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 8093 	bne.w	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d90f      	bls.n	8002bda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	6093      	str	r3, [r2, #8]
 8002bd8:	e07e      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d114      	bne.n	8002c3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c24:	461a      	mov	r2, r3
 8002c26:	2101      	movs	r1, #1
 8002c28:	f002 fd38 	bl	800569c <USB_EP0_OutStart>
 8002c2c:	e006      	b.n	8002c3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f004 ffee 	bl	8007c24 <HAL_PCD_DataOutStageCallback>
 8002c48:	e046      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d124      	bne.n	8002c9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6e:	6093      	str	r3, [r2, #8]
 8002c70:	e032      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f004 ffc5 	bl	8007c24 <HAL_PCD_DataOutStageCallback>
 8002c9a:	e01d      	b.n	8002cd8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d114      	bne.n	8002ccc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f002 fce8 	bl	800569c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f004 ffa6 	bl	8007c24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	4f54300a 	.word	0x4f54300a
 8002ce8:	4f54310a 	.word	0x4f54310a

08002cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	333c      	adds	r3, #60	; 0x3c
 8002d04:	3304      	adds	r3, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d90e      	bls.n	8002d40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f004 ff5d 	bl	8007c00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d90c      	bls.n	8002d68 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	799b      	ldrb	r3, [r3, #6]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d60:	461a      	mov	r2, r3
 8002d62:	2101      	movs	r1, #1
 8002d64:	f002 fc9a 	bl	800569c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	4f54300a 	.word	0x4f54300a

08002d78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
 8002d84:	4613      	mov	r3, r2
 8002d86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d96:	883b      	ldrh	r3, [r7, #0]
 8002d98:	0419      	lsls	r1, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e028      	b.n	8002df8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	4413      	add	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e00d      	b.n	8002dd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	3340      	adds	r3, #64	; 0x40
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3ec      	bcc.n	8002dba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002de0:	883b      	ldrh	r3, [r7, #0]
 8002de2:	0418      	lsls	r0, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4302      	orrs	r2, r0
 8002df0:	3340      	adds	r3, #64	; 0x40
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e267      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d075      	beq.n	8002f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d00c      	beq.n	8002e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d112      	bne.n	8002e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e76:	4b82      	ldr	r3, [pc, #520]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e82:	d10b      	bne.n	8002e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	4b7e      	ldr	r3, [pc, #504]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05b      	beq.n	8002f48 <HAL_RCC_OscConfig+0x108>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d157      	bne.n	8002f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e242      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x74>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x98>
 8002ebe:	4b70      	ldr	r3, [pc, #448]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6f      	ldr	r2, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xb0>
 8002ed8:	4b69      	ldr	r3, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fd fee8 	bl	8000ccc <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fd fee4 	bl	8000ccc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e207      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xc0>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fd fed4 	bl	8000ccc <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fd fed0 	bl	8000ccc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1f3      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0xe8>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b44      	ldr	r3, [pc, #272]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x152>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1c7      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4937      	ldr	r1, [pc, #220]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x244>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fe89 	bl	8000ccc <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fd fe85 	bl	8000ccc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1a8      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4925      	ldr	r1, [pc, #148]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x244>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fe68 	bl	8000ccc <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003000:	f7fd fe64 	bl	8000ccc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e187      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d036      	beq.n	8003098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_RCC_OscConfig+0x248>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fd fe48 	bl	8000ccc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7fd fe44 	bl	8000ccc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e167      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x240>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x200>
 800305e:	e01b      	b.n	8003098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_OscConfig+0x248>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fd fe31 	bl	8000ccc <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e00e      	b.n	800308c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fd fe2d 	bl	8000ccc <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d907      	bls.n	800308c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e150      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
 8003080:	40023800 	.word	0x40023800
 8003084:	42470000 	.word	0x42470000
 8003088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	4b88      	ldr	r3, [pc, #544]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ea      	bne.n	800306e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8097 	beq.w	80031d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4b81      	ldr	r3, [pc, #516]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a7c      	ldr	r2, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b77      	ldr	r3, [pc, #476]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b74      	ldr	r3, [pc, #464]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fd fded 	bl	8000ccc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fd fde9 	bl	8000ccc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e10c      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <HAL_RCC_OscConfig+0x474>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x2ea>
 800311c:	4b64      	ldr	r3, [pc, #400]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	; 0x70
 8003128:	e01c      	b.n	8003164 <HAL_RCC_OscConfig+0x324>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x30c>
 8003132:	4b5f      	ldr	r3, [pc, #380]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	4b5c      	ldr	r3, [pc, #368]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0x324>
 800314c:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a57      	ldr	r2, [pc, #348]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a54      	ldr	r2, [pc, #336]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fdae 	bl	8000ccc <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fdaa 	bl	8000ccc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0cb      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RCC_OscConfig+0x334>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7fd fd98 	bl	8000ccc <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fd fd94 	bl	8000ccc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0b5      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4a38      	ldr	r2, [pc, #224]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a1 	beq.w	8003320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d05c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d141      	bne.n	8003276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fd68 	bl	8000ccc <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fd fd64 	bl	8000ccc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e087      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	491b      	ldr	r1, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fd fd3d 	bl	8000ccc <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fd39 	bl	8000ccc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e05c      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x416>
 8003274:	e054      	b.n	8003320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_OscConfig+0x478>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fd fd26 	bl	8000ccc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fd fd22 	bl	8000ccc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e045      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_OscConfig+0x470>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x444>
 80032a2:	e03d      	b.n	8003320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e038      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40007000 	.word	0x40007000
 80032b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4ec>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d028      	beq.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d121      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11a      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	3b01      	subs	r3, #1
 8003306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0cc      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d90c      	bls.n	800336c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d044      	beq.n	8003450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d119      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d003      	beq.n	80033ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e067      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4934      	ldr	r1, [pc, #208]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fd fc54 	bl	8000ccc <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fd fc50 	bl	8000ccc <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e04f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d20c      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490a      	ldr	r1, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fbb4 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08008b74 	.word	0x08008b74
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b090      	sub	sp, #64	; 0x40
 8003502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
 8003508:	2300      	movs	r3, #0
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350c:	2300      	movs	r3, #0
 800350e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d00d      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x40>
 8003520:	2b08      	cmp	r3, #8
 8003522:	f200 80a1 	bhi.w	8003668 <HAL_RCC_GetSysClockFreq+0x16c>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x34>
 800352a:	2b04      	cmp	r3, #4
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x3a>
 800352e:	e09b      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_GetSysClockFreq+0x184>)
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003534:	e09b      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003536:	4b53      	ldr	r3, [pc, #332]	; (8003684 <HAL_RCC_GetSysClockFreq+0x188>)
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800353a:	e098      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800353c:	4b4f      	ldr	r3, [pc, #316]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d028      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003552:	4b4a      	ldr	r3, [pc, #296]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	2200      	movs	r2, #0
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	627a      	str	r2, [r7, #36]	; 0x24
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003564:	2100      	movs	r1, #0
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_GetSysClockFreq+0x188>)
 8003568:	fb03 f201 	mul.w	r2, r3, r1
 800356c:	2300      	movs	r3, #0
 800356e:	fb00 f303 	mul.w	r3, r0, r3
 8003572:	4413      	add	r3, r2
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_RCC_GetSysClockFreq+0x188>)
 8003576:	fba0 1202 	umull	r1, r2, r0, r2
 800357a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357c:	460a      	mov	r2, r1
 800357e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003582:	4413      	add	r3, r2
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	2200      	movs	r2, #0
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	61fa      	str	r2, [r7, #28]
 800358e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003592:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003596:	f7fc fe7b 	bl	8000290 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4613      	mov	r3, r2
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a2:	e053      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	2200      	movs	r2, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	617a      	str	r2, [r7, #20]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035b6:	f04f 0b00 	mov.w	fp, #0
 80035ba:	4652      	mov	r2, sl
 80035bc:	465b      	mov	r3, fp
 80035be:	f04f 0000 	mov.w	r0, #0
 80035c2:	f04f 0100 	mov.w	r1, #0
 80035c6:	0159      	lsls	r1, r3, #5
 80035c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035cc:	0150      	lsls	r0, r2, #5
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	ebb2 080a 	subs.w	r8, r2, sl
 80035d6:	eb63 090b 	sbc.w	r9, r3, fp
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ee:	ebb2 0408 	subs.w	r4, r2, r8
 80035f2:	eb63 0509 	sbc.w	r5, r3, r9
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	00eb      	lsls	r3, r5, #3
 8003600:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003604:	00e2      	lsls	r2, r4, #3
 8003606:	4614      	mov	r4, r2
 8003608:	461d      	mov	r5, r3
 800360a:	eb14 030a 	adds.w	r3, r4, sl
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	eb45 030b 	adc.w	r3, r5, fp
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003622:	4629      	mov	r1, r5
 8003624:	028b      	lsls	r3, r1, #10
 8003626:	4621      	mov	r1, r4
 8003628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800362c:	4621      	mov	r1, r4
 800362e:	028a      	lsls	r2, r1, #10
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	2200      	movs	r2, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	60fa      	str	r2, [r7, #12]
 800363c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003640:	f7fc fe26 	bl	8000290 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4613      	mov	r3, r2
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetSysClockFreq+0x180>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	3301      	adds	r3, #1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800365c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003666:	e002      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetSysClockFreq+0x184>)
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800366c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003670:	4618      	mov	r0, r3
 8003672:	3740      	adds	r7, #64	; 0x40
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400
 8003684:	017d7840 	.word	0x017d7840

08003688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <HAL_RCC_GetHCLKFreq+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a4:	f7ff fff0 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0a9b      	lsrs	r3, r3, #10
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08008b84 	.word	0x08008b84

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036cc:	f7ff ffdc 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0b5b      	lsrs	r3, r3, #13
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	08008b84 	.word	0x08008b84

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e042      	b.n	8003788 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd f946 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa8b 	bl	8003c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d112      	bne.n	80037d0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_UART_Receive_DMA+0x26>
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00b      	b.n	80037d2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f91c 	bl	8003a04 <UART_Start_Receive_DMA>
 80037cc:	4603      	mov	r3, r0
 80037ce:	e000      	b.n	80037d2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b09c      	sub	sp, #112	; 0x70
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d172      	bne.n	8003908 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003824:	2200      	movs	r2, #0
 8003826:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003848:	65ba      	str	r2, [r7, #88]	; 0x58
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800384e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	667b      	str	r3, [r7, #100]	; 0x64
 8003874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3314      	adds	r3, #20
 800387a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800387c:	647a      	str	r2, [r7, #68]	; 0x44
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	623b      	str	r3, [r7, #32]
   return(result);
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b0:	633a      	str	r2, [r7, #48]	; 0x30
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d119      	bne.n	8003908 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	617b      	str	r3, [r7, #20]
   return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e5      	bne.n	80038d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	2200      	movs	r2, #0
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	2b01      	cmp	r3, #1
 8003914:	d106      	bne.n	8003924 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800391a:	4619      	mov	r1, r3
 800391c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800391e:	f7ff ff66 	bl	80037ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003922:	e002      	b.n	800392a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003924:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003926:	f7fc fe41 	bl	80005ac <HAL_UART_RxCpltCallback>
}
 800392a:	bf00      	nop
 800392c:	3770      	adds	r7, #112	; 0x70
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	4619      	mov	r1, r3
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ff48 	bl	80037ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800395e:	e002      	b.n	8003966 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7fc fe13 	bl	800058c <HAL_UART_RxHalfCpltCallback>
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b21      	cmp	r3, #33	; 0x21
 80039a0:	d108      	bne.n	80039b4 <UART_DMAError+0x46>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	f000 f8c2 	bl	8003b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b22      	cmp	r3, #34	; 0x22
 80039d4:	d108      	bne.n	80039e8 <UART_DMAError+0x7a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f000 f8d0 	bl	8003b88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f7ff fef0 	bl	80037da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b098      	sub	sp, #96	; 0x60
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2222      	movs	r2, #34	; 0x22
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	4a3e      	ldr	r2, [pc, #248]	; (8003b2c <UART_Start_Receive_DMA+0x128>)
 8003a32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	4a3d      	ldr	r2, [pc, #244]	; (8003b30 <UART_Start_Receive_DMA+0x12c>)
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	4a3c      	ldr	r2, [pc, #240]	; (8003b34 <UART_Start_Receive_DMA+0x130>)
 8003a42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	2200      	movs	r2, #0
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a4c:	f107 0308 	add.w	r3, r7, #8
 8003a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	f7fd fb22 	bl	80010ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d019      	beq.n	8003aba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ada:	63ba      	str	r2, [r7, #56]	; 0x38
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	617b      	str	r3, [r7, #20]
   return(result);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b04:	653b      	str	r3, [r7, #80]	; 0x50
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6a39      	ldr	r1, [r7, #32]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e5      	bne.n	8003aee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3760      	adds	r7, #96	; 0x60
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	08003807 	.word	0x08003807
 8003b30:	08003933 	.word	0x08003933
 8003b34:	0800396f 	.word	0x0800396f

08003b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	61ba      	str	r2, [r7, #24]
 8003b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003b7c:	bf00      	nop
 8003b7e:	3724      	adds	r7, #36	; 0x24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b095      	sub	sp, #84	; 0x54
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	e853 3f00 	ldrex	r3, [r3]
 8003b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb8:	e841 2300 	strex	r3, r2, [r1]
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e5      	bne.n	8003b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d119      	bne.n	8003c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c20:	61ba      	str	r2, [r7, #24]
 8003c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c42:	bf00      	nop
 8003c44:	3754      	adds	r7, #84	; 0x54
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c54:	b0c0      	sub	sp, #256	; 0x100
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	68d9      	ldr	r1, [r3, #12]
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	ea40 0301 	orr.w	r3, r0, r1
 8003c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca8:	f021 010c 	bic.w	r1, r1, #12
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	6999      	ldr	r1, [r3, #24]
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	ea40 0301 	orr.w	r3, r0, r1
 8003cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b8f      	ldr	r3, [pc, #572]	; (8003f1c <UART_SetConfig+0x2cc>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d005      	beq.n	8003cf0 <UART_SetConfig+0xa0>
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b8d      	ldr	r3, [pc, #564]	; (8003f20 <UART_SetConfig+0x2d0>)
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d104      	bne.n	8003cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7ff fcea 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cf8:	e003      	b.n	8003d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cfa:	f7ff fcd1 	bl	80036a0 <HAL_RCC_GetPCLK1Freq>
 8003cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0c:	f040 810c 	bne.w	8003f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d32:	4621      	mov	r1, r4
 8003d34:	eb12 0801 	adds.w	r8, r2, r1
 8003d38:	4629      	mov	r1, r5
 8003d3a:	eb43 0901 	adc.w	r9, r3, r1
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d52:	4690      	mov	r8, r2
 8003d54:	4699      	mov	r9, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	eb18 0303 	adds.w	r3, r8, r3
 8003d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d60:	462b      	mov	r3, r5
 8003d62:	eb49 0303 	adc.w	r3, r9, r3
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d7e:	460b      	mov	r3, r1
 8003d80:	18db      	adds	r3, r3, r3
 8003d82:	653b      	str	r3, [r7, #80]	; 0x50
 8003d84:	4613      	mov	r3, r2
 8003d86:	eb42 0303 	adc.w	r3, r2, r3
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d94:	f7fc fa7c 	bl	8000290 <__aeabi_uldivmod>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	011c      	lsls	r4, r3, #4
 8003da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dc8:	4641      	mov	r1, r8
 8003dca:	eb12 0a01 	adds.w	sl, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de8:	4692      	mov	sl, r2
 8003dea:	469b      	mov	fp, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	eb1a 0303 	adds.w	r3, sl, r3
 8003df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003df6:	464b      	mov	r3, r9
 8003df8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e14:	460b      	mov	r3, r1
 8003e16:	18db      	adds	r3, r3, r3
 8003e18:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
 8003e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e2a:	f7fc fa31 	bl	8000290 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2301 	umull	r2, r3, r3, r1
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	1acb      	subs	r3, r1, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e58:	441c      	add	r4, r3
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e74:	415b      	adcs	r3, r3
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	1851      	adds	r1, r2, r1
 8003e80:	6339      	str	r1, [r7, #48]	; 0x30
 8003e82:	4649      	mov	r1, r9
 8003e84:	414b      	adcs	r3, r1
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e94:	4659      	mov	r1, fp
 8003e96:	00cb      	lsls	r3, r1, #3
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	00ca      	lsls	r2, r1, #3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	189b      	adds	r3, r3, r2
 8003eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	18db      	adds	r3, r3, r3
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ee6:	f7fc f9d3 	bl	8000290 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	2164      	movs	r1, #100	; 0x64
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	3332      	adds	r3, #50	; 0x32
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <UART_SetConfig+0x2d4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 0207 	and.w	r2, r3, #7
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4422      	add	r2, r4
 8003f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f18:	e106      	b.n	8004128 <UART_SetConfig+0x4d8>
 8003f1a:	bf00      	nop
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	1891      	adds	r1, r2, r2
 8003f40:	6239      	str	r1, [r7, #32]
 8003f42:	415b      	adcs	r3, r3
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	1854      	adds	r4, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb43 0501 	adc.w	r5, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	00eb      	lsls	r3, r5, #3
 8003f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f62:	00e2      	lsls	r2, r4, #3
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	18e3      	adds	r3, r4, r3
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f70:	464b      	mov	r3, r9
 8003f72:	eb45 0303 	adc.w	r3, r5, r3
 8003f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f96:	4629      	mov	r1, r5
 8003f98:	008b      	lsls	r3, r1, #2
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	008a      	lsls	r2, r1, #2
 8003fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fa8:	f7fc f972 	bl	8000290 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b60      	ldr	r3, [pc, #384]	; (8004134 <UART_SetConfig+0x4e4>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011c      	lsls	r4, r3, #4
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	61b9      	str	r1, [r7, #24]
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6139      	str	r1, [r7, #16]
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004010:	464b      	mov	r3, r9
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67bb      	str	r3, [r7, #120]	; 0x78
 8004026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004034:	4649      	mov	r1, r9
 8004036:	008b      	lsls	r3, r1, #2
 8004038:	4641      	mov	r1, r8
 800403a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800403e:	4641      	mov	r1, r8
 8004040:	008a      	lsls	r2, r1, #2
 8004042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004046:	f7fc f923 	bl	8000290 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4611      	mov	r1, r2
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <UART_SetConfig+0x4e4>)
 8004052:	fba3 2301 	umull	r2, r3, r3, r1
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2264      	movs	r2, #100	; 0x64
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	1acb      	subs	r3, r1, r3
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	3332      	adds	r3, #50	; 0x32
 8004064:	4a33      	ldr	r2, [pc, #204]	; (8004134 <UART_SetConfig+0x4e4>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004070:	441c      	add	r4, r3
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	673b      	str	r3, [r7, #112]	; 0x70
 800407a:	677a      	str	r2, [r7, #116]	; 0x74
 800407c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	415b      	adcs	r3, r3
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6039      	str	r1, [r7, #0]
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c2:	464b      	mov	r3, r9
 80040c4:	460a      	mov	r2, r1
 80040c6:	eb42 0303 	adc.w	r3, r2, r3
 80040ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
 80040d6:	667a      	str	r2, [r7, #100]	; 0x64
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040e4:	4649      	mov	r1, r9
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	4641      	mov	r1, r8
 80040ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ee:	4641      	mov	r1, r8
 80040f0:	008a      	lsls	r2, r1, #2
 80040f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040f6:	f7fc f8cb 	bl	8000290 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <UART_SetConfig+0x4e4>)
 8004100:	fba3 1302 	umull	r1, r3, r3, r2
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	2164      	movs	r1, #100	; 0x64
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	3332      	adds	r3, #50	; 0x32
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <UART_SetConfig+0x4e4>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4422      	add	r2, r4
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800412e:	46bd      	mov	sp, r7
 8004130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004134:	51eb851f 	.word	0x51eb851f

08004138 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 001c 	add.w	r0, r7, #28
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800414a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800414e:	2b01      	cmp	r3, #1
 8004150:	d123      	bne.n	800419a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800417a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f001 fae2 	bl	8005758 <USB_CoreReset>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e01b      	b.n	80041d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f001 fad6 	bl	8005758 <USB_CoreReset>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
 80041c4:	e005      	b.n	80041d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041d2:	7fbb      	ldrb	r3, [r7, #30]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10b      	bne.n	80041f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f043 0206 	orr.w	r2, r3, #6
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041fc:	b004      	add	sp, #16
 80041fe:	4770      	bx	lr

08004200 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d165      	bne.n	80042e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a41      	ldr	r2, [pc, #260]	; (800431c <USB_SetTurnaroundTime+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d906      	bls.n	800422a <USB_SetTurnaroundTime+0x2a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4a40      	ldr	r2, [pc, #256]	; (8004320 <USB_SetTurnaroundTime+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d202      	bcs.n	800422a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004224:	230f      	movs	r3, #15
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e062      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <USB_SetTurnaroundTime+0x120>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d306      	bcc.n	8004240 <USB_SetTurnaroundTime+0x40>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <USB_SetTurnaroundTime+0x124>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d202      	bcs.n	8004240 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800423a:	230e      	movs	r3, #14
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e057      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a38      	ldr	r2, [pc, #224]	; (8004324 <USB_SetTurnaroundTime+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d306      	bcc.n	8004256 <USB_SetTurnaroundTime+0x56>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a37      	ldr	r2, [pc, #220]	; (8004328 <USB_SetTurnaroundTime+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d202      	bcs.n	8004256 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004250:	230d      	movs	r3, #13
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e04c      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a33      	ldr	r2, [pc, #204]	; (8004328 <USB_SetTurnaroundTime+0x128>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d306      	bcc.n	800426c <USB_SetTurnaroundTime+0x6c>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a32      	ldr	r2, [pc, #200]	; (800432c <USB_SetTurnaroundTime+0x12c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d802      	bhi.n	800426c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004266:	230c      	movs	r3, #12
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e041      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a2f      	ldr	r2, [pc, #188]	; (800432c <USB_SetTurnaroundTime+0x12c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d906      	bls.n	8004282 <USB_SetTurnaroundTime+0x82>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <USB_SetTurnaroundTime+0x130>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d802      	bhi.n	8004282 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800427c:	230b      	movs	r3, #11
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e036      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <USB_SetTurnaroundTime+0x130>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d906      	bls.n	8004298 <USB_SetTurnaroundTime+0x98>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <USB_SetTurnaroundTime+0x134>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004292:	230a      	movs	r3, #10
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e02b      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a26      	ldr	r2, [pc, #152]	; (8004334 <USB_SetTurnaroundTime+0x134>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0xae>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a25      	ldr	r2, [pc, #148]	; (8004338 <USB_SetTurnaroundTime+0x138>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d202      	bcs.n	80042ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042a8:	2309      	movs	r3, #9
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e020      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <USB_SetTurnaroundTime+0x138>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d306      	bcc.n	80042c4 <USB_SetTurnaroundTime+0xc4>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <USB_SetTurnaroundTime+0x13c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042be:	2308      	movs	r3, #8
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e015      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <USB_SetTurnaroundTime+0x13c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0xda>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <USB_SetTurnaroundTime+0x140>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d202      	bcs.n	80042da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042d4:	2307      	movs	r3, #7
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e00a      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042da:	2306      	movs	r3, #6
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e007      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042e6:	2309      	movs	r3, #9
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e001      	b.n	80042f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042ec:	2309      	movs	r3, #9
 80042ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	00d8acbf 	.word	0x00d8acbf
 8004320:	00e4e1c0 	.word	0x00e4e1c0
 8004324:	00f42400 	.word	0x00f42400
 8004328:	01067380 	.word	0x01067380
 800432c:	011a499f 	.word	0x011a499f
 8004330:	01312cff 	.word	0x01312cff
 8004334:	014ca43f 	.word	0x014ca43f
 8004338:	016e3600 	.word	0x016e3600
 800433c:	01a6ab1f 	.word	0x01a6ab1f
 8004340:	01e84800 	.word	0x01e84800

08004344 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0201 	bic.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d115      	bne.n	80043d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043b6:	200a      	movs	r0, #10
 80043b8:	f7fc fc94 	bl	8000ce4 <HAL_Delay>
      ms += 10U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	330a      	adds	r3, #10
 80043c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 f939 	bl	800563a <USB_GetMode>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d01e      	beq.n	800440c <USB_SetCurrentMode+0x84>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2bc7      	cmp	r3, #199	; 0xc7
 80043d2:	d9f0      	bls.n	80043b6 <USB_SetCurrentMode+0x2e>
 80043d4:	e01a      	b.n	800440c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d115      	bne.n	8004408 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043e8:	200a      	movs	r0, #10
 80043ea:	f7fc fc7b 	bl	8000ce4 <HAL_Delay>
      ms += 10U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	330a      	adds	r3, #10
 80043f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f001 f920 	bl	800563a <USB_GetMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <USB_SetCurrentMode+0x84>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2bc7      	cmp	r3, #199	; 0xc7
 8004404:	d9f0      	bls.n	80043e8 <USB_SetCurrentMode+0x60>
 8004406:	e001      	b.n	800440c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e005      	b.n	8004418 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2bc8      	cmp	r3, #200	; 0xc8
 8004410:	d101      	bne.n	8004416 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004420:	b084      	sub	sp, #16
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800442e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e009      	b.n	8004454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3340      	adds	r3, #64	; 0x40
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b0e      	cmp	r3, #14
 8004458:	d9f2      	bls.n	8004440 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800445a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11c      	bne.n	800449c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
 800449a:	e00b      	b.n	80044b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ba:	461a      	mov	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10d      	bne.n	80044e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044d0:	2100      	movs	r1, #0
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f968 	bl	80047a8 <USB_SetDevSpeed>
 80044d8:	e008      	b.n	80044ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044da:	2101      	movs	r1, #1
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f963 	bl	80047a8 <USB_SetDevSpeed>
 80044e2:	e003      	b.n	80044ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044e4:	2103      	movs	r1, #3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f95e 	bl	80047a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044ec:	2110      	movs	r1, #16
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f8fa 	bl	80046e8 <USB_FlushTxFifo>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f924 	bl	800474c <USB_FlushRxFifo>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	461a      	mov	r2, r3
 8004516:	2300      	movs	r3, #0
 8004518:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	461a      	mov	r2, r3
 8004522:	2300      	movs	r3, #0
 8004524:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e043      	b.n	80045c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800454a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454e:	d118      	bne.n	8004582 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e013      	b.n	8004594 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	461a      	mov	r2, r3
 800457a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e008      	b.n	8004594 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	461a      	mov	r2, r3
 8004590:	2300      	movs	r3, #0
 8004592:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	461a      	mov	r2, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	461a      	mov	r2, r3
 80045b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045c4:	461a      	mov	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d3b5      	bcc.n	8004538 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e043      	b.n	800465a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e8:	d118      	bne.n	800461c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e013      	b.n	800462e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e008      	b.n	800462e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	461a      	mov	r2, r3
 800464e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3301      	adds	r3, #1
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800465e:	461a      	mov	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4293      	cmp	r3, r2
 8004664:	d3b5      	bcc.n	80045d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004686:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f043 0210 	orr.w	r2, r3, #16
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <USB_DevInit+0x2c4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f043 0208 	orr.w	r2, r3, #8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046e0:	b004      	add	sp, #16
 80046e2:	4770      	bx	lr
 80046e4:	803c3800 	.word	0x803c3800

080046e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004702:	d901      	bls.n	8004708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e01b      	b.n	8004740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	daf2      	bge.n	80046f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	019b      	lsls	r3, r3, #6
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800472c:	d901      	bls.n	8004732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e006      	b.n	8004740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	d0f0      	beq.n	8004720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004764:	d901      	bls.n	800476a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e018      	b.n	800479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	daf2      	bge.n	8004758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2210      	movs	r2, #16
 800477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004788:	d901      	bls.n	800478e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e006      	b.n	800479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d0f0      	beq.n	800477c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b087      	sub	sp, #28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0306 	and.w	r3, r3, #6
 80047f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
 80047fe:	e00a      	b.n	8004816 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d002      	beq.n	800480c <USB_GetDevSpeed+0x32>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d102      	bne.n	8004812 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800480c:	2302      	movs	r3, #2
 800480e:	75fb      	strb	r3, [r7, #23]
 8004810:	e001      	b.n	8004816 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004812:	230f      	movs	r3, #15
 8004814:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004816:	7dfb      	ldrb	r3, [r7, #23]
}
 8004818:	4618      	mov	r0, r3
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d13a      	bne.n	80048b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2101      	movs	r1, #1
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	b29b      	uxth	r3, r3
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485e:	4313      	orrs	r3, r2
 8004860:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d155      	bne.n	8004924 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	791b      	ldrb	r3, [r3, #4]
 8004892:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004894:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	059b      	lsls	r3, r3, #22
 800489a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800489c:	4313      	orrs	r3, r2
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e036      	b.n	8004924 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d11a      	bne.n	8004924 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800490a:	430b      	orrs	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004922:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	785b      	ldrb	r3, [r3, #1]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d161      	bne.n	8004a14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004966:	d11f      	bne.n	80049a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004986:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c8:	4013      	ands	r3, r2
 80049ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ec:	4013      	ands	r3, r2
 80049ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0159      	lsls	r1, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	440b      	add	r3, r1
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <USB_DeactivateEndpoint+0x1b0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
 8004a12:	e060      	b.n	8004ad6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2a:	d11f      	bne.n	8004a6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	43db      	mvns	r3, r3
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	0159      	lsls	r1, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	440b      	add	r3, r1
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <USB_DeactivateEndpoint+0x1b4>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	ec337800 	.word	0xec337800
 8004ae8:	eff37800 	.word	0xeff37800

08004aec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	4613      	mov	r3, r2
 8004af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 817a 	bne.w	8004e02 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d132      	bne.n	8004b7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	0cdb      	lsrs	r3, r3, #19
 8004b76:	04db      	lsls	r3, r3, #19
 8004b78:	6113      	str	r3, [r2, #16]
 8004b7a:	e092      	b.n	8004ca2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b96:	0cdb      	lsrs	r3, r3, #19
 8004b98:	04db      	lsls	r3, r3, #19
 8004b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bbe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11a      	bne.n	8004bfc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d903      	bls.n	8004bda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf8:	6113      	str	r3, [r2, #16]
 8004bfa:	e01b      	b.n	8004c34 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6919      	ldr	r1, [r3, #16]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	440b      	add	r3, r1
 8004c14:	1e59      	subs	r1, r3, #1
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c20:	4ba2      	ldr	r3, [pc, #648]	; (8004eac <USB_EPStartXfer+0x3c0>)
 8004c22:	400b      	ands	r3, r1
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	0148      	lsls	r0, r1, #5
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c30:	4313      	orrs	r3, r2
 8004c32:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	0148      	lsls	r0, r1, #5
 8004c4e:	69f9      	ldr	r1, [r7, #28]
 8004c50:	4401      	add	r1, r0
 8004c52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	791b      	ldrb	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11f      	bne.n	8004ca2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d14b      	bne.n	8004d40 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d009      	beq.n	8004cc4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	791b      	ldrb	r3, [r3, #4]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d128      	bne.n	8004d1e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d110      	bne.n	8004cfe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e00f      	b.n	8004d1e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e165      	b.n	800500c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d015      	beq.n	8004d94 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 814d 	beq.w	800500c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	634b      	str	r3, [r1, #52]	; 0x34
 8004d92:	e13b      	b.n	800500c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d110      	bne.n	8004dc6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e00f      	b.n	8004de6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	b298      	uxth	r0, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4603      	mov	r3, r0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f9b8 	bl	8005170 <USB_WritePacket>
 8004e00:	e104      	b.n	800500c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1c:	0cdb      	lsrs	r3, r3, #19
 8004e1e:	04db      	lsls	r3, r3, #19
 8004e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e44:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d131      	bne.n	8004eb0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7a:	69b9      	ldr	r1, [r7, #24]
 8004e7c:	0148      	lsls	r0, r1, #5
 8004e7e:	69f9      	ldr	r1, [r7, #28]
 8004e80:	4401      	add	r1, r0
 8004e82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea8:	6113      	str	r3, [r2, #16]
 8004eaa:	e061      	b.n	8004f70 <USB_EPStartXfer+0x484>
 8004eac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d123      	bne.n	8004f00 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	0148      	lsls	r0, r1, #5
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004efc:	6113      	str	r3, [r2, #16]
 8004efe:	e037      	b.n	8004f70 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	1e5a      	subs	r2, r3, #1
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	8afa      	ldrh	r2, [r7, #22]
 8004f1c:	fb03 f202 	mul.w	r2, r3, r2
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	8afb      	ldrh	r3, [r7, #22]
 8004f34:	04d9      	lsls	r1, r3, #19
 8004f36:	4b38      	ldr	r3, [pc, #224]	; (8005018 <USB_EPStartXfer+0x52c>)
 8004f38:	400b      	ands	r3, r1
 8004f3a:	69b9      	ldr	r1, [r7, #24]
 8004f3c:	0148      	lsls	r0, r1, #5
 8004f3e:	69f9      	ldr	r1, [r7, #28]
 8004f40:	4401      	add	r1, r0
 8004f42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f46:	4313      	orrs	r3, r2
 8004f48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	0148      	lsls	r0, r1, #5
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	4401      	add	r1, r0
 8004f68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d10d      	bne.n	8004f92 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	460a      	mov	r2, r1
 8004f90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	791b      	ldrb	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d128      	bne.n	8004fec <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d110      	bne.n	8004fcc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00f      	b.n	8004fec <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800500a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	1ff80000 	.word	0x1ff80000

0800501c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d14a      	bne.n	80050d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800504e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005052:	f040 8086 	bne.w	8005162 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005078:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800509c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d902      	bls.n	80050b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
          break;
 80050b2:	e056      	b.n	8005162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050cc:	d0e7      	beq.n	800509e <USB_EPStopXfer+0x82>
 80050ce:	e048      	b.n	8005162 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e8:	d13b      	bne.n	8005162 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005108:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800510c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f242 7210 	movw	r2, #10000	; 0x2710
 800513e:	4293      	cmp	r3, r2
 8005140:	d902      	bls.n	8005148 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
          break;
 8005146:	e00c      	b.n	8005162 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005160:	d0e7      	beq.n	8005132 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005162:	7dfb      	ldrb	r3, [r7, #23]
}
 8005164:	4618      	mov	r0, r3
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	460b      	mov	r3, r1
 8005180:	71fb      	strb	r3, [r7, #7]
 8005182:	4613      	mov	r3, r2
 8005184:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800518e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d123      	bne.n	80051de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005196:	88bb      	ldrh	r3, [r7, #4]
 8005198:	3303      	adds	r3, #3
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e018      	b.n	80051d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	031a      	lsls	r2, r3, #12
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	461a      	mov	r2, r3
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3301      	adds	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3301      	adds	r3, #1
 80051ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d3e2      	bcc.n	80051a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3724      	adds	r7, #36	; 0x24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b08b      	sub	sp, #44	; 0x2c
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	b29b      	uxth	r3, r3
 8005208:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	623b      	str	r3, [r7, #32]
 8005216:	e014      	b.n	8005242 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	601a      	str	r2, [r3, #0]
    pDest++;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	3301      	adds	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	3301      	adds	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	3301      	adds	r3, #1
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	3301      	adds	r3, #1
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	3301      	adds	r3, #1
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3e6      	bcc.n	8005218 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800524a:	8bfb      	ldrh	r3, [r7, #30]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01e      	beq.n	800528e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525a:	461a      	mov	r2, r3
 800525c:	f107 0310 	add.w	r3, r7, #16
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	701a      	strb	r2, [r3, #0]
      i++;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	3301      	adds	r3, #1
 800527a:	623b      	str	r3, [r7, #32]
      pDest++;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3301      	adds	r3, #1
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005282:	8bfb      	ldrh	r3, [r7, #30]
 8005284:	3b01      	subs	r3, #1
 8005286:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005288:	8bfb      	ldrh	r3, [r7, #30]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ea      	bne.n	8005264 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005290:	4618      	mov	r0, r3
 8005292:	372c      	adds	r7, #44	; 0x2c
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d12c      	bne.n	8005312 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	db12      	blt.n	80052f0 <USB_EPSetStall+0x54>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00f      	beq.n	80052f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e02b      	b.n	800536a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	db12      	blt.n	800534a <USB_EPSetStall+0xae>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00f      	beq.n	800534a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005348:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d128      	bne.n	80053e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	791b      	ldrb	r3, [r3, #4]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d003      	beq.n	80053c4 <USB_EPClearStall+0x4c>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	791b      	ldrb	r3, [r3, #4]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d138      	bne.n	8005436 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e027      	b.n	8005436 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005404:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	791b      	ldrb	r3, [r3, #4]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d003      	beq.n	8005416 <USB_EPClearStall+0x9e>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	791b      	ldrb	r3, [r3, #4]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d10f      	bne.n	8005436 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005462:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005466:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f023 0302 	bic.w	r3, r3, #2
 80054c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054ec:	f023 0303 	bic.w	r3, r3, #3
 80054f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	0c1b      	lsrs	r3, r3, #16
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	4013      	ands	r3, r2
 8005590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	b29b      	uxth	r3, r3
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4013      	ands	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055d0:	68bb      	ldr	r3, [r7, #8]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055de:	b480      	push	{r7}
 80055e0:	b087      	sub	sp, #28
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	01db      	lsls	r3, r3, #7
 8005610:	b2db      	uxtb	r3, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4013      	ands	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800562c:	68bb      	ldr	r3, [r7, #8]
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0301 	and.w	r3, r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005670:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	460b      	mov	r3, r1
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	333c      	adds	r3, #60	; 0x3c
 80056b2:	3304      	adds	r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4a26      	ldr	r2, [pc, #152]	; (8005754 <USB_EP0_OutStart+0xb8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d90a      	bls.n	80056d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d0:	d101      	bne.n	80056d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e037      	b.n	8005746 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	461a      	mov	r2, r3
 80056de:	2300      	movs	r3, #0
 80056e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f043 0318 	orr.w	r3, r3, #24
 8005708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005718:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800571c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800571e:	7afb      	ldrb	r3, [r7, #11]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10f      	bne.n	8005744 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	4f54300a 	.word	0x4f54300a

08005758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005770:	d901      	bls.n	8005776 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e01b      	b.n	80057ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	daf2      	bge.n	8005764 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800579a:	d901      	bls.n	80057a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e006      	b.n	80057ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d0f0      	beq.n	800578e <USB_CoreReset+0x36>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057cc:	f002 fc8a 	bl	80080e4 <USBD_static_malloc>
 80057d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32b0      	adds	r2, #176	; 0xb0
 80057e2:	2100      	movs	r1, #0
 80057e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0d4      	b.n	8005996 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057f0:	2100      	movs	r1, #0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f002 fcee 	bl	80081d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	32b0      	adds	r2, #176	; 0xb0
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	32b0      	adds	r2, #176	; 0xb0
 8005812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7c1b      	ldrb	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d138      	bne.n	8005896 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005824:	4b5e      	ldr	r3, [pc, #376]	; (80059a0 <USBD_CDC_Init+0x1e4>)
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800582c:	2202      	movs	r2, #2
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 fb35 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005834:	4b5a      	ldr	r3, [pc, #360]	; (80059a0 <USBD_CDC_Init+0x1e4>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	3324      	adds	r3, #36	; 0x24
 800584a:	2201      	movs	r2, #1
 800584c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800584e:	4b55      	ldr	r3, [pc, #340]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005856:	2202      	movs	r2, #2
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 fb20 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800585e:	4b51      	ldr	r3, [pc, #324]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005876:	2201      	movs	r2, #1
 8005878:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800587a:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <USBD_CDC_Init+0x1ec>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	3326      	adds	r3, #38	; 0x26
 8005890:	2210      	movs	r2, #16
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e035      	b.n	8005902 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005896:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <USBD_CDC_Init+0x1e4>)
 8005898:	7819      	ldrb	r1, [r3, #0]
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	2202      	movs	r2, #2
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f002 fafd 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058a4:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <USBD_CDC_Init+0x1e4>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	3324      	adds	r3, #36	; 0x24
 80058ba:	2201      	movs	r2, #1
 80058bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058be:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 80058c0:	7819      	ldrb	r1, [r3, #0]
 80058c2:	2340      	movs	r3, #64	; 0x40
 80058c4:	2202      	movs	r2, #2
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f002 fae9 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058e4:	2201      	movs	r2, #1
 80058e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058e8:	4b2f      	ldr	r3, [pc, #188]	; (80059a8 <USBD_CDC_Init+0x1ec>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3326      	adds	r3, #38	; 0x26
 80058fe:	2210      	movs	r2, #16
 8005900:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005902:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <USBD_CDC_Init+0x1ec>)
 8005904:	7819      	ldrb	r1, [r3, #0]
 8005906:	2308      	movs	r3, #8
 8005908:	2203      	movs	r2, #3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f002 fac7 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <USBD_CDC_Init+0x1ec>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	f003 020f 	and.w	r2, r3, #15
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	3324      	adds	r3, #36	; 0x24
 8005926:	2201      	movs	r2, #1
 8005928:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	33b0      	adds	r3, #176	; 0xb0
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005960:	2302      	movs	r3, #2
 8005962:	e018      	b.n	8005996 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7c1b      	ldrb	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 800596e:	7819      	ldrb	r1, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f002 fb7e 	bl	800807c <USBD_LL_PrepareReceive>
 8005980:	e008      	b.n	8005994 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <USBD_CDC_Init+0x1e8>)
 8005984:	7819      	ldrb	r1, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800598c:	2340      	movs	r3, #64	; 0x40
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f002 fb74 	bl	800807c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000093 	.word	0x20000093
 80059a4:	20000094 	.word	0x20000094
 80059a8:	20000095 	.word	0x20000095

080059ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80059b8:	4b3a      	ldr	r3, [pc, #232]	; (8005aa4 <USBD_CDC_DeInit+0xf8>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f002 fa93 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059c4:	4b37      	ldr	r3, [pc, #220]	; (8005aa4 <USBD_CDC_DeInit+0xf8>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3324      	adds	r3, #36	; 0x24
 80059da:	2200      	movs	r2, #0
 80059dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059de:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <USBD_CDC_DeInit+0xfc>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f002 fa80 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <USBD_CDC_DeInit+0xfc>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 020f 	and.w	r2, r3, #15
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a02:	2200      	movs	r2, #0
 8005a04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <USBD_CDC_DeInit+0x100>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f002 fa6c 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <USBD_CDC_DeInit+0x100>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a2c:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <USBD_CDC_DeInit+0x100>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3326      	adds	r3, #38	; 0x26
 8005a42:	2200      	movs	r2, #0
 8005a44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	32b0      	adds	r2, #176	; 0xb0
 8005a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01f      	beq.n	8005a98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	33b0      	adds	r3, #176	; 0xb0
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	32b0      	adds	r2, #176	; 0xb0
 8005a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f002 fb40 	bl	8008100 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	32b0      	adds	r2, #176	; 0xb0
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000093 	.word	0x20000093
 8005aa8:	20000094 	.word	0x20000094
 8005aac:	20000095 	.word	0x20000095

08005ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	32b0      	adds	r2, #176	; 0xb0
 8005ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0bf      	b.n	8005c60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d050      	beq.n	8005b8e <USBD_CDC_Setup+0xde>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	f040 80af 	bne.w	8005c50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d03a      	beq.n	8005b70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da1b      	bge.n	8005b3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	33b0      	adds	r3, #176	; 0xb0
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	88d2      	ldrh	r2, [r2, #6]
 8005b20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	88db      	ldrh	r3, [r3, #6]
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	bf28      	it	cs
 8005b2a:	2307      	movcs	r3, #7
 8005b2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	89fa      	ldrh	r2, [r7, #14]
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fd89 	bl	800764c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b3a:	e090      	b.n	8005c5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	785a      	ldrb	r2, [r3, #1]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	88db      	ldrh	r3, [r3, #6]
 8005b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b4c:	d803      	bhi.n	8005b56 <USBD_CDC_Setup+0xa6>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	88db      	ldrh	r3, [r3, #6]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	e000      	b.n	8005b58 <USBD_CDC_Setup+0xa8>
 8005b56:	2240      	movs	r2, #64	; 0x40
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b66:	461a      	mov	r2, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fd9b 	bl	80076a4 <USBD_CtlPrepareRx>
      break;
 8005b6e:	e076      	b.n	8005c5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	33b0      	adds	r3, #176	; 0xb0
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	7850      	ldrb	r0, [r2, #1]
 8005b86:	2200      	movs	r2, #0
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	4798      	blx	r3
      break;
 8005b8c:	e067      	b.n	8005c5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b0b      	cmp	r3, #11
 8005b94:	d851      	bhi.n	8005c3a <USBD_CDC_Setup+0x18a>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <USBD_CDC_Setup+0xec>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bcd 	.word	0x08005bcd
 8005ba0:	08005c49 	.word	0x08005c49
 8005ba4:	08005c3b 	.word	0x08005c3b
 8005ba8:	08005c3b 	.word	0x08005c3b
 8005bac:	08005c3b 	.word	0x08005c3b
 8005bb0:	08005c3b 	.word	0x08005c3b
 8005bb4:	08005c3b 	.word	0x08005c3b
 8005bb8:	08005c3b 	.word	0x08005c3b
 8005bbc:	08005c3b 	.word	0x08005c3b
 8005bc0:	08005c3b 	.word	0x08005c3b
 8005bc4:	08005bf7 	.word	0x08005bf7
 8005bc8:	08005c21 	.word	0x08005c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d107      	bne.n	8005be8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bd8:	f107 030a 	add.w	r3, r7, #10
 8005bdc:	2202      	movs	r2, #2
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fd33 	bl	800764c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be6:	e032      	b.n	8005c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fcbd 	bl	800756a <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	75fb      	strb	r3, [r7, #23]
          break;
 8005bf4:	e02b      	b.n	8005c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d107      	bne.n	8005c12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c02:	f107 030d 	add.w	r3, r7, #13
 8005c06:	2201      	movs	r2, #1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fd1e 	bl	800764c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c10:	e01d      	b.n	8005c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fca8 	bl	800756a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c1e:	e016      	b.n	8005c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d00f      	beq.n	8005c4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 fc9b 	bl	800756a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c38:	e008      	b.n	8005c4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fc94 	bl	800756a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c42:	2303      	movs	r3, #3
 8005c44:	75fb      	strb	r3, [r7, #23]
          break;
 8005c46:	e002      	b.n	8005c4e <USBD_CDC_Setup+0x19e>
          break;
 8005c48:	bf00      	nop
 8005c4a:	e008      	b.n	8005c5e <USBD_CDC_Setup+0x1ae>
          break;
 8005c4c:	bf00      	nop
      }
      break;
 8005c4e:	e006      	b.n	8005c5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fc89 	bl	800756a <USBD_CtlError>
      ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	32b0      	adds	r2, #176	; 0xb0
 8005c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e065      	b.n	8005d5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	32b0      	adds	r2, #176	; 0xb0
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02f      	beq.n	8005d1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3318      	adds	r3, #24
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f003 010f 	and.w	r1, r3, #15
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4403      	add	r3, r0
 8005ce4:	331c      	adds	r3, #28
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d112      	bne.n	8005d1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3318      	adds	r3, #24
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d0e:	78f9      	ldrb	r1, [r7, #3]
 8005d10:	2300      	movs	r3, #0
 8005d12:	2200      	movs	r2, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 f990 	bl	800803a <USBD_LL_Transmit>
 8005d1a:	e01f      	b.n	8005d5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	33b0      	adds	r3, #176	; 0xb0
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	33b0      	adds	r3, #176	; 0xb0
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	32b0      	adds	r2, #176	; 0xb0
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	32b0      	adds	r2, #176	; 0xb0
 8005d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e01a      	b.n	8005dce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f002 f98e 	bl	80080be <USBD_LL_GetRxDataSize>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	33b0      	adds	r3, #176	; 0xb0
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32b0      	adds	r2, #176	; 0xb0
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e025      	b.n	8005e44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	33b0      	adds	r3, #176	; 0xb0
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <USBD_CDC_EP0_RxReady+0x6c>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e12:	2bff      	cmp	r3, #255	; 0xff
 8005e14:	d015      	beq.n	8005e42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	33b0      	adds	r3, #176	; 0xb0
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e36:	b292      	uxth	r2, r2
 8005e38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e54:	2182      	movs	r1, #130	; 0x82
 8005e56:	4818      	ldr	r0, [pc, #96]	; (8005eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e58:	f000 fd4f 	bl	80068fa <USBD_GetEpDesc>
 8005e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4815      	ldr	r0, [pc, #84]	; (8005eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e62:	f000 fd4a 	bl	80068fa <USBD_GetEpDesc>
 8005e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e68:	2181      	movs	r1, #129	; 0x81
 8005e6a:	4813      	ldr	r0, [pc, #76]	; (8005eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e6c:	f000 fd45 	bl	80068fa <USBD_GetEpDesc>
 8005e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8c:	711a      	strb	r2, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d006      	beq.n	8005ea6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea0:	711a      	strb	r2, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2243      	movs	r2, #67	; 0x43
 8005eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005eac:	4b02      	ldr	r3, [pc, #8]	; (8005eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000050 	.word	0x20000050

08005ebc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ec4:	2182      	movs	r1, #130	; 0x82
 8005ec6:	4818      	ldr	r0, [pc, #96]	; (8005f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ec8:	f000 fd17 	bl	80068fa <USBD_GetEpDesc>
 8005ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4815      	ldr	r0, [pc, #84]	; (8005f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ed2:	f000 fd12 	bl	80068fa <USBD_GetEpDesc>
 8005ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ed8:	2181      	movs	r1, #129	; 0x81
 8005eda:	4813      	ldr	r0, [pc, #76]	; (8005f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005edc:	f000 fd0d 	bl	80068fa <USBD_GetEpDesc>
 8005ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2210      	movs	r2, #16
 8005eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	711a      	strb	r2, [r3, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f042 0202 	orr.w	r2, r2, #2
 8005f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d006      	beq.n	8005f16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	711a      	strb	r2, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f042 0202 	orr.w	r2, r2, #2
 8005f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2243      	movs	r2, #67	; 0x43
 8005f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000050 	.word	0x20000050

08005f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f34:	2182      	movs	r1, #130	; 0x82
 8005f36:	4818      	ldr	r0, [pc, #96]	; (8005f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f38:	f000 fcdf 	bl	80068fa <USBD_GetEpDesc>
 8005f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4815      	ldr	r0, [pc, #84]	; (8005f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f42:	f000 fcda 	bl	80068fa <USBD_GetEpDesc>
 8005f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f48:	2181      	movs	r1, #129	; 0x81
 8005f4a:	4813      	ldr	r0, [pc, #76]	; (8005f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f4c:	f000 fcd5 	bl	80068fa <USBD_GetEpDesc>
 8005f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6c:	711a      	strb	r2, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d006      	beq.n	8005f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f80:	711a      	strb	r2, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2243      	movs	r2, #67	; 0x43
 8005f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000050 	.word	0x20000050

08005f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	220a      	movs	r2, #10
 8005fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005faa:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	2000000c 	.word	0x2000000c

08005fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e009      	b.n	8005fe4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	33b0      	adds	r3, #176	; 0xb0
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	32b0      	adds	r2, #176	; 0xb0
 8006006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006012:	2303      	movs	r3, #3
 8006014:	e008      	b.n	8006028 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	32b0      	adds	r2, #176	; 0xb0
 8006048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	e004      	b.n	8006062 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	32b0      	adds	r2, #176	; 0xb0
 8006082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006086:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	e025      	b.n	80060e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800609c:	2b00      	cmp	r3, #0
 800609e:	d11f      	bne.n	80060e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <USBD_CDC_TransmitPacket+0x7c>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	3318      	adds	r3, #24
 80060c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <USBD_CDC_TransmitPacket+0x7c>)
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 ffaf 	bl	800803a <USBD_LL_Transmit>

    ret = USBD_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000093 	.word	0x20000093

080060f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32b0      	adds	r2, #176	; 0xb0
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32b0      	adds	r2, #176	; 0xb0
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	e018      	b.n	8006150 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7c1b      	ldrb	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <USBD_CDC_ReceivePacket+0x68>)
 8006128:	7819      	ldrb	r1, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 ffa1 	bl	800807c <USBD_LL_PrepareReceive>
 800613a:	e008      	b.n	800614e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <USBD_CDC_ReceivePacket+0x68>)
 800613e:	7819      	ldrb	r1, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 ff97 	bl	800807c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000094 	.word	0x20000094

0800615c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e01f      	b.n	80061b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	79fa      	ldrb	r2, [r7, #7]
 80061a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fe11 	bl	8007dd0 <USBD_LL_Init>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e025      	b.n	8006220 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	32ae      	adds	r2, #174	; 0xae
 80061fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	f107 020e 	add.w	r2, r7, #14
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fe19 	bl	8007e68 <USBD_LL_Start>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	4611      	mov	r1, r2
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f90e 	bl	80074f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d01a      	beq.n	8006334 <USBD_LL_SetupStage+0x72>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d822      	bhi.n	8006348 <USBD_LL_SetupStage+0x86>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <USBD_LL_SetupStage+0x4a>
 8006306:	2b01      	cmp	r3, #1
 8006308:	d00a      	beq.n	8006320 <USBD_LL_SetupStage+0x5e>
 800630a:	e01d      	b.n	8006348 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb65 	bl	80069e4 <USBD_StdDevReq>
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	e020      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fbcd 	bl	8006ac8 <USBD_StdItfReq>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
      break;
 8006332:	e016      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc2f 	bl	8006ba0 <USBD_StdEPReq>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]
      break;
 8006346:	e00c      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800634e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006352:	b2db      	uxtb	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fde6 	bl	8007f28 <USBD_LL_StallEP>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	bf00      	nop
  }

  return ret;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d16e      	bne.n	8006462 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800638a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006392:	2b03      	cmp	r3, #3
 8006394:	f040 8098 	bne.w	80064c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d913      	bls.n	80063cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	bf28      	it	cs
 80063be:	4613      	movcs	r3, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f001 f98a 	bl	80076de <USBD_CtlContinueRx>
 80063ca:	e07d      	b.n	80064c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d014      	beq.n	8006404 <USBD_LL_DataOutStage+0x98>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d81d      	bhi.n	800641a <USBD_LL_DataOutStage+0xae>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USBD_LL_DataOutStage+0x7c>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d003      	beq.n	80063ee <USBD_LL_DataOutStage+0x82>
 80063e6:	e018      	b.n	800641a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75bb      	strb	r3, [r7, #22]
            break;
 80063ec:	e018      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	4619      	mov	r1, r3
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa64 	bl	80068c6 <USBD_CoreFindIF>
 80063fe:	4603      	mov	r3, r0
 8006400:	75bb      	strb	r3, [r7, #22]
            break;
 8006402:	e00d      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800640a:	b2db      	uxtb	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa66 	bl	80068e0 <USBD_CoreFindEP>
 8006414:	4603      	mov	r3, r0
 8006416:	75bb      	strb	r3, [r7, #22]
            break;
 8006418:	e002      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	75bb      	strb	r3, [r7, #22]
            break;
 800641e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006420:	7dbb      	ldrb	r3, [r7, #22]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d119      	bne.n	800645a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d113      	bne.n	800645a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006432:	7dba      	ldrb	r2, [r7, #22]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	32ae      	adds	r2, #174	; 0xae
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006442:	7dba      	ldrb	r2, [r7, #22]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 f950 	bl	8007700 <USBD_CtlSendStatus>
 8006460:	e032      	b.n	80064c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006468:	b2db      	uxtb	r3, r3
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa37 	bl	80068e0 <USBD_CoreFindEP>
 8006472:	4603      	mov	r3, r0
 8006474:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006476:	7dbb      	ldrb	r3, [r7, #22]
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d025      	beq.n	80064c8 <USBD_LL_DataOutStage+0x15c>
 800647c:	7dbb      	ldrb	r3, [r7, #22]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d122      	bne.n	80064c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d117      	bne.n	80064be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800648e:	7dba      	ldrb	r2, [r7, #22]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	32ae      	adds	r2, #174	; 0xae
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00f      	beq.n	80064be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800649e:	7dba      	ldrb	r2, [r7, #22]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064a6:	7dba      	ldrb	r2, [r7, #22]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	32ae      	adds	r2, #174	; 0xae
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	7afa      	ldrb	r2, [r7, #11]
 80064b4:	4611      	mov	r1, r2
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	e000      	b.n	80064ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	460b      	mov	r3, r1
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d16f      	bne.n	80065c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3314      	adds	r3, #20
 80064ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d15a      	bne.n	80065ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d914      	bls.n	800652c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	461a      	mov	r2, r3
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 f8b2 	bl	8007682 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800651e:	2300      	movs	r3, #0
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fda9 	bl	800807c <USBD_LL_PrepareReceive>
 800652a:	e03f      	b.n	80065ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d11c      	bne.n	8006572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006540:	429a      	cmp	r2, r3
 8006542:	d316      	bcc.n	8006572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800654e:	429a      	cmp	r2, r3
 8006550:	d20f      	bcs.n	8006572 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f001 f893 	bl	8007682 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 fd86 	bl	800807c <USBD_LL_PrepareReceive>
 8006570:	e01c      	b.n	80065ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d10f      	bne.n	800659e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f001 fcc1 	bl	8007f28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 f8bd 	bl	8007726 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03a      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fe42 	bl	8006240 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065c4:	e032      	b.n	800662c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	4619      	mov	r1, r3
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f985 	bl	80068e0 <USBD_CoreFindEP>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2bff      	cmp	r3, #255	; 0xff
 80065de:	d025      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d122      	bne.n	800662c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d11c      	bne.n	800662c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065f2:	7dfa      	ldrb	r2, [r7, #23]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	32ae      	adds	r2, #174	; 0xae
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d014      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006602:	7dfa      	ldrb	r2, [r7, #23]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800660a:	7dfa      	ldrb	r2, [r7, #23]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	32ae      	adds	r2, #174	; 0xae
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	7afa      	ldrb	r2, [r7, #11]
 8006618:	4611      	mov	r1, r2
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	4798      	blx	r3
 800661e:	4603      	mov	r3, r0
 8006620:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006628:	7dbb      	ldrb	r3, [r7, #22]
 800662a:	e000      	b.n	800662e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d014      	beq.n	800669c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6852      	ldr	r2, [r2, #4]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	4611      	mov	r1, r2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006698:	2303      	movs	r3, #3
 800669a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	2200      	movs	r2, #0
 80066a0:	2100      	movs	r1, #0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fbfb 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2240      	movs	r2, #64	; 0x40
 80066b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	2200      	movs	r2, #0
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fbed 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	621a      	str	r2, [r3, #32]

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b04      	cmp	r3, #4
 800670c:	d006      	beq.n	800671c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006714:	b2da      	uxtb	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2204      	movs	r2, #4
 8006720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b04      	cmp	r3, #4
 8006744:	d106      	bne.n	8006754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800674c:	b2da      	uxtb	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d110      	bne.n	8006798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	32ae      	adds	r2, #174	; 0xae
 80067b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e01c      	b.n	80067fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d115      	bne.n	80067fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32ae      	adds	r2, #174	; 0xae
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32ae      	adds	r2, #174	; 0xae
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	4611      	mov	r1, r2
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	32ae      	adds	r2, #174	; 0xae
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e01c      	b.n	8006862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b03      	cmp	r3, #3
 8006832:	d115      	bne.n	8006860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32ae      	adds	r2, #174	; 0xae
 800683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32ae      	adds	r2, #174	; 0xae
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	4611      	mov	r1, r2
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00e      	beq.n	80068bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6852      	ldr	r2, [r2, #4]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	4611      	mov	r1, r2
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	885b      	ldrh	r3, [r3, #2]
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	429a      	cmp	r2, r3
 8006920:	d920      	bls.n	8006964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800692a:	e013      	b.n	8006954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800692c:	f107 030a 	add.w	r3, r7, #10
 8006930:	4619      	mov	r1, r3
 8006932:	6978      	ldr	r0, [r7, #20]
 8006934:	f000 f81b 	bl	800696e <USBD_GetNextDesc>
 8006938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	2b05      	cmp	r3, #5
 8006940:	d108      	bne.n	8006954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	789b      	ldrb	r3, [r3, #2]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	429a      	cmp	r2, r3
 800694e:	d008      	beq.n	8006962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	b29a      	uxth	r2, r3
 800695a:	897b      	ldrh	r3, [r7, #10]
 800695c:	429a      	cmp	r2, r3
 800695e:	d8e5      	bhi.n	800692c <USBD_GetEpDesc+0x32>
 8006960:	e000      	b.n	8006964 <USBD_GetEpDesc+0x6a>
          break;
 8006962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006964:	693b      	ldr	r3, [r7, #16]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	881a      	ldrh	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	4413      	add	r3, r2
 8006988:	b29a      	uxth	r2, r3
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4413      	add	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800699a:	68fb      	ldr	r3, [r7, #12]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	3301      	adds	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069c6:	8a3b      	ldrh	r3, [r7, #16]
 80069c8:	021b      	lsls	r3, r3, #8
 80069ca:	b21a      	sxth	r2, r3
 80069cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b21b      	sxth	r3, r3
 80069d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069d6:	89fb      	ldrh	r3, [r7, #14]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d005      	beq.n	8006a0a <USBD_StdDevReq+0x26>
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d857      	bhi.n	8006ab2 <USBD_StdDevReq+0xce>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00f      	beq.n	8006a26 <USBD_StdDevReq+0x42>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d153      	bne.n	8006ab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32ae      	adds	r2, #174	; 0xae
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
      break;
 8006a24:	e04a      	b.n	8006abc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b09      	cmp	r3, #9
 8006a2c:	d83b      	bhi.n	8006aa6 <USBD_StdDevReq+0xc2>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <USBD_StdDevReq+0x50>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a9d 	.word	0x08006a9d
 8006a3c:	08006aa7 	.word	0x08006aa7
 8006a40:	08006a93 	.word	0x08006a93
 8006a44:	08006aa7 	.word	0x08006aa7
 8006a48:	08006a67 	.word	0x08006a67
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006aa7 	.word	0x08006aa7
 8006a54:	08006a7f 	.word	0x08006a7f
 8006a58:	08006a71 	.word	0x08006a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa3c 	bl	8006edc <USBD_GetDescriptor>
          break;
 8006a64:	e024      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fba1 	bl	80071b0 <USBD_SetAddress>
          break;
 8006a6e:	e01f      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fbe0 	bl	8007238 <USBD_SetConfig>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a7c:	e018      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc83 	bl	800738c <USBD_GetConfig>
          break;
 8006a86:	e013      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fcb4 	bl	80073f8 <USBD_GetStatus>
          break;
 8006a90:	e00e      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fce3 	bl	8007460 <USBD_SetFeature>
          break;
 8006a9a:	e009      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd07 	bl	80074b2 <USBD_ClrFeature>
          break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fd5e 	bl	800756a <USBD_CtlError>
          break;
 8006aae:	bf00      	nop
      }
      break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fd58 	bl	800756a <USBD_CtlError>
      break;
 8006aba:	bf00      	nop
  }

  return ret;
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop

08006ac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d005      	beq.n	8006aee <USBD_StdItfReq+0x26>
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d852      	bhi.n	8006b8c <USBD_StdItfReq+0xc4>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <USBD_StdItfReq+0x26>
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d14e      	bne.n	8006b8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d840      	bhi.n	8006b7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	889b      	ldrh	r3, [r3, #4]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d836      	bhi.n	8006b74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	889b      	ldrh	r3, [r3, #4]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fed9 	bl	80068c6 <USBD_CoreFindIF>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2bff      	cmp	r3, #255	; 0xff
 8006b1c:	d01d      	beq.n	8006b5a <USBD_StdItfReq+0x92>
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11a      	bne.n	8006b5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b24:	7bba      	ldrb	r2, [r7, #14]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32ae      	adds	r2, #174	; 0xae
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00f      	beq.n	8006b54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b34:	7bba      	ldrb	r2, [r7, #14]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b3c:	7bba      	ldrb	r2, [r7, #14]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32ae      	adds	r2, #174	; 0xae
 8006b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b52:	e004      	b.n	8006b5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b58:	e001      	b.n	8006b5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88db      	ldrh	r3, [r3, #6]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d110      	bne.n	8006b88 <USBD_StdItfReq+0xc0>
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10d      	bne.n	8006b88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fdc7 	bl	8007700 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b72:	e009      	b.n	8006b88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fcf7 	bl	800756a <USBD_CtlError>
          break;
 8006b7c:	e004      	b.n	8006b88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fcf2 	bl	800756a <USBD_CtlError>
          break;
 8006b86:	e000      	b.n	8006b8a <USBD_StdItfReq+0xc2>
          break;
 8006b88:	bf00      	nop
      }
      break;
 8006b8a:	e004      	b.n	8006b96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fceb 	bl	800756a <USBD_CtlError>
      break;
 8006b94:	bf00      	nop
  }

  return ret;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	889b      	ldrh	r3, [r3, #4]
 8006bb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d007      	beq.n	8006bd0 <USBD_StdEPReq+0x30>
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	f200 817f 	bhi.w	8006ec4 <USBD_StdEPReq+0x324>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d02a      	beq.n	8006c20 <USBD_StdEPReq+0x80>
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	f040 817a 	bne.w	8006ec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fe83 	bl	80068e0 <USBD_CoreFindEP>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bde:	7b7b      	ldrb	r3, [r7, #13]
 8006be0:	2bff      	cmp	r3, #255	; 0xff
 8006be2:	f000 8174 	beq.w	8006ece <USBD_StdEPReq+0x32e>
 8006be6:	7b7b      	ldrb	r3, [r7, #13]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f040 8170 	bne.w	8006ece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bee:	7b7a      	ldrb	r2, [r7, #13]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bf6:	7b7a      	ldrb	r2, [r7, #13]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32ae      	adds	r2, #174	; 0xae
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8163 	beq.w	8006ece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006c08:	7b7a      	ldrb	r2, [r7, #13]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	32ae      	adds	r2, #174	; 0xae
 8006c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c1e:	e156      	b.n	8006ece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d008      	beq.n	8006c3a <USBD_StdEPReq+0x9a>
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	f300 8145 	bgt.w	8006eb8 <USBD_StdEPReq+0x318>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 809b 	beq.w	8006d6a <USBD_StdEPReq+0x1ca>
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d03c      	beq.n	8006cb2 <USBD_StdEPReq+0x112>
 8006c38:	e13e      	b.n	8006eb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d002      	beq.n	8006c4c <USBD_StdEPReq+0xac>
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d016      	beq.n	8006c78 <USBD_StdEPReq+0xd8>
 8006c4a:	e02c      	b.n	8006ca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00d      	beq.n	8006c6e <USBD_StdEPReq+0xce>
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d00a      	beq.n	8006c6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f963 	bl	8007f28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c62:	2180      	movs	r1, #128	; 0x80
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f95f 	bl	8007f28 <USBD_LL_StallEP>
 8006c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c6c:	e020      	b.n	8006cb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc7a 	bl	800756a <USBD_CtlError>
              break;
 8006c76:	e01b      	b.n	8006cb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	885b      	ldrh	r3, [r3, #2]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10e      	bne.n	8006c9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <USBD_StdEPReq+0xfe>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d008      	beq.n	8006c9e <USBD_StdEPReq+0xfe>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f945 	bl	8007f28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fd2e 	bl	8007700 <USBD_CtlSendStatus>

              break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc5e 	bl	800756a <USBD_CtlError>
              break;
 8006cae:	bf00      	nop
          }
          break;
 8006cb0:	e107      	b.n	8006ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d002      	beq.n	8006cc4 <USBD_StdEPReq+0x124>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d016      	beq.n	8006cf0 <USBD_StdEPReq+0x150>
 8006cc2:	e04b      	b.n	8006d5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00d      	beq.n	8006ce6 <USBD_StdEPReq+0x146>
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d00a      	beq.n	8006ce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f927 	bl	8007f28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 f923 	bl	8007f28 <USBD_LL_StallEP>
 8006ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ce4:	e040      	b.n	8006d68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc3e 	bl	800756a <USBD_CtlError>
              break;
 8006cee:	e03b      	b.n	8006d68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	885b      	ldrh	r3, [r3, #2]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d136      	bne.n	8006d66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f92d 	bl	8007f66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fcf7 	bl	8007700 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fde2 	bl	80068e0 <USBD_CoreFindEP>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d20:	7b7b      	ldrb	r3, [r7, #13]
 8006d22:	2bff      	cmp	r3, #255	; 0xff
 8006d24:	d01f      	beq.n	8006d66 <USBD_StdEPReq+0x1c6>
 8006d26:	7b7b      	ldrb	r3, [r7, #13]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11c      	bne.n	8006d66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d2c:	7b7a      	ldrb	r2, [r7, #13]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d34:	7b7a      	ldrb	r2, [r7, #13]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	; 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d44:	7b7a      	ldrb	r2, [r7, #13]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	32ae      	adds	r2, #174	; 0xae
 8006d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d5a:	e004      	b.n	8006d66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fc03 	bl	800756a <USBD_CtlError>
              break;
 8006d64:	e000      	b.n	8006d68 <USBD_StdEPReq+0x1c8>
              break;
 8006d66:	bf00      	nop
          }
          break;
 8006d68:	e0ab      	b.n	8006ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d002      	beq.n	8006d7c <USBD_StdEPReq+0x1dc>
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d032      	beq.n	8006de0 <USBD_StdEPReq+0x240>
 8006d7a:	e097      	b.n	8006eac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <USBD_StdEPReq+0x1f2>
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d004      	beq.n	8006d92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fbed 	bl	800756a <USBD_CtlError>
                break;
 8006d90:	e091      	b.n	8006eb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da0b      	bge.n	8006db2 <USBD_StdEPReq+0x212>
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	3310      	adds	r3, #16
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	3304      	adds	r3, #4
 8006db0:	e00b      	b.n	8006dca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3304      	adds	r3, #4
 8006dca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fc37 	bl	800764c <USBD_CtlSendData>
              break;
 8006dde:	e06a      	b.n	8006eb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da11      	bge.n	8006e0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	3324      	adds	r3, #36	; 0x24
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d117      	bne.n	8006e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fbb0 	bl	800756a <USBD_CtlError>
                  break;
 8006e0a:	e054      	b.n	8006eb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	f003 020f 	and.w	r2, r3, #15
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb9d 	bl	800756a <USBD_CtlError>
                  break;
 8006e30:	e041      	b.n	8006eb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da0b      	bge.n	8006e52 <USBD_StdEPReq+0x2b2>
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3310      	adds	r3, #16
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	e00b      	b.n	8006e6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	3304      	adds	r3, #4
 8006e6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <USBD_StdEPReq+0x2d8>
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	2b80      	cmp	r3, #128	; 0x80
 8006e76:	d103      	bne.n	8006e80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e00e      	b.n	8006e9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f88d 	bl	8007fa4 <USBD_LL_IsStallEP>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2201      	movs	r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e002      	b.n	8006e9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fbd1 	bl	800764c <USBD_CtlSendData>
              break;
 8006eaa:	e004      	b.n	8006eb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fb5b 	bl	800756a <USBD_CtlError>
              break;
 8006eb4:	bf00      	nop
          }
          break;
 8006eb6:	e004      	b.n	8006ec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb55 	bl	800756a <USBD_CtlError>
          break;
 8006ec0:	bf00      	nop
      }
      break;
 8006ec2:	e005      	b.n	8006ed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fb4f 	bl	800756a <USBD_CtlError>
      break;
 8006ecc:	e000      	b.n	8006ed0 <USBD_StdEPReq+0x330>
      break;
 8006ece:	bf00      	nop
  }

  return ret;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	2b06      	cmp	r3, #6
 8006efe:	f200 8128 	bhi.w	8007152 <USBD_GetDescriptor+0x276>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBD_GetDescriptor+0x2c>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f25 	.word	0x08006f25
 8006f0c:	08006f3d 	.word	0x08006f3d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08007153 	.word	0x08007153
 8006f18:	08007153 	.word	0x08007153
 8006f1c:	080070f3 	.word	0x080070f3
 8006f20:	0800711f 	.word	0x0800711f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
      break;
 8006f3a:	e112      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7c1b      	ldrb	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	f107 0208 	add.w	r2, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f5e:	e100      	b.n	8007162 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f107 0208 	add.w	r2, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	2202      	movs	r2, #2
 8006f78:	701a      	strb	r2, [r3, #0]
      break;
 8006f7a:	e0f2      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	f200 80ac 	bhi.w	80070e0 <USBD_GetDescriptor+0x204>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBD_GetDescriptor+0xb4>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fa9 	.word	0x08006fa9
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08007045 	.word	0x08007045
 8006fa0:	08007079 	.word	0x08007079
 8006fa4:	080070ad 	.word	0x080070ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e091      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 facb 	bl	800756a <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e089      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e077      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fab1 	bl	800756a <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e06f      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e05d      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa97 	bl	800756a <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e055      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007066:	e043      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa7d 	bl	800756a <USBD_CtlError>
            err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
          break;
 8007076:	e03b      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e029      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa63 	bl	800756a <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e021      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e00f      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa49 	bl	800756a <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e007      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa41 	bl	800756a <USBD_CtlError>
          err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070ee:	bf00      	nop
      }
      break;
 80070f0:	e037      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7c1b      	ldrb	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	f107 0208 	add.w	r2, r7, #8
 8007106:	4610      	mov	r0, r2
 8007108:	4798      	blx	r3
 800710a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800710c:	e029      	b.n	8007162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa2a 	bl	800756a <USBD_CtlError>
        err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	e021      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7c1b      	ldrb	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	f107 0208 	add.w	r2, r7, #8
 8007132:	4610      	mov	r0, r2
 8007134:	4798      	blx	r3
 8007136:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	2207      	movs	r2, #7
 800713e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007140:	e00f      	b.n	8007162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa10 	bl	800756a <USBD_CtlError>
        err++;
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	3301      	adds	r3, #1
 800714e:	72fb      	strb	r3, [r7, #11]
      break;
 8007150:	e007      	b.n	8007162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa08 	bl	800756a <USBD_CtlError>
      err++;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	3301      	adds	r3, #1
 800715e:	72fb      	strb	r3, [r7, #11]
      break;
 8007160:	bf00      	nop
  }

  if (err != 0U)
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11e      	bne.n	80071a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	88db      	ldrh	r3, [r3, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88da      	ldrh	r2, [r3, #6]
 800717a:	893b      	ldrh	r3, [r7, #8]
 800717c:	4293      	cmp	r3, r2
 800717e:	bf28      	it	cs
 8007180:	4613      	movcs	r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	461a      	mov	r2, r3
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa5d 	bl	800764c <USBD_CtlSendData>
 8007192:	e009      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9e7 	bl	800756a <USBD_CtlError>
 800719c:	e004      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 faae 	bl	8007700 <USBD_CtlSendStatus>
 80071a4:	e000      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    return;
 80071a6:	bf00      	nop
  }
}
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	889b      	ldrh	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d131      	bne.n	8007226 <USBD_SetAddress+0x76>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d12d      	bne.n	8007226 <USBD_SetAddress+0x76>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	885b      	ldrh	r3, [r3, #2]
 80071ce:	2b7f      	cmp	r3, #127	; 0x7f
 80071d0:	d829      	bhi.n	8007226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d104      	bne.n	80071f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9bc 	bl	800756a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	e01d      	b.n	8007230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fefb 	bl	8007ffc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa7a 	bl	8007700 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	e009      	b.n	8007230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	e004      	b.n	8007230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f99e 	bl	800756a <USBD_CtlError>
  }
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	885b      	ldrh	r3, [r3, #2]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	4b4e      	ldr	r3, [pc, #312]	; (8007388 <USBD_SetConfig+0x150>)
 800724e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007250:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <USBD_SetConfig+0x150>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d905      	bls.n	8007264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f985 	bl	800756a <USBD_CtlError>
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e08c      	b.n	800737e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_SetConfig+0x3e>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d029      	beq.n	80072c8 <USBD_SetConfig+0x90>
 8007274:	e075      	b.n	8007362 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007276:	4b44      	ldr	r3, [pc, #272]	; (8007388 <USBD_SetConfig+0x150>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d020      	beq.n	80072c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800727e:	4b42      	ldr	r3, [pc, #264]	; (8007388 <USBD_SetConfig+0x150>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007288:	4b3f      	ldr	r3, [pc, #252]	; (8007388 <USBD_SetConfig+0x150>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fe ffe1 	bl	8006256 <USBD_SetClassConfig>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f962 	bl	800756a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ae:	e065      	b.n	800737c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa25 	bl	8007700 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2203      	movs	r2, #3
 80072ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072be:	e05d      	b.n	800737c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa1d 	bl	8007700 <USBD_CtlSendStatus>
      break;
 80072c6:	e059      	b.n	800737c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072c8:	4b2f      	ldr	r3, [pc, #188]	; (8007388 <USBD_SetConfig+0x150>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d112      	bne.n	80072f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072d8:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <USBD_SetConfig+0x150>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072e2:	4b29      	ldr	r3, [pc, #164]	; (8007388 <USBD_SetConfig+0x150>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fe ffd0 	bl	800628e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa06 	bl	8007700 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072f4:	e042      	b.n	800737c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072f6:	4b24      	ldr	r3, [pc, #144]	; (8007388 <USBD_SetConfig+0x150>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d02a      	beq.n	800735a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fe ffbe 	bl	800628e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007312:	4b1d      	ldr	r3, [pc, #116]	; (8007388 <USBD_SetConfig+0x150>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800731c:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <USBD_SetConfig+0x150>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fe ff97 	bl	8006256 <USBD_SetClassConfig>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00f      	beq.n	8007352 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f918 	bl	800756a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe ffa3 	bl	800628e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007350:	e014      	b.n	800737c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9d4 	bl	8007700 <USBD_CtlSendStatus>
      break;
 8007358:	e010      	b.n	800737c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9d0 	bl	8007700 <USBD_CtlSendStatus>
      break;
 8007360:	e00c      	b.n	800737c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f900 	bl	800756a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <USBD_SetConfig+0x150>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fe ff8c 	bl	800628e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007376:	2303      	movs	r3, #3
 8007378:	73fb      	strb	r3, [r7, #15]
      break;
 800737a:	bf00      	nop
  }

  return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000274 	.word	0x20000274

0800738c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d004      	beq.n	80073a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f8e2 	bl	800756a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073a6:	e023      	b.n	80073f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	dc02      	bgt.n	80073ba <USBD_GetConfig+0x2e>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dc03      	bgt.n	80073c0 <USBD_GetConfig+0x34>
 80073b8:	e015      	b.n	80073e6 <USBD_GetConfig+0x5a>
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d00b      	beq.n	80073d6 <USBD_GetConfig+0x4a>
 80073be:	e012      	b.n	80073e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3308      	adds	r3, #8
 80073ca:	2201      	movs	r2, #1
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f93c 	bl	800764c <USBD_CtlSendData>
        break;
 80073d4:	e00c      	b.n	80073f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3304      	adds	r3, #4
 80073da:	2201      	movs	r2, #1
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f934 	bl	800764c <USBD_CtlSendData>
        break;
 80073e4:	e004      	b.n	80073f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f8be 	bl	800756a <USBD_CtlError>
        break;
 80073ee:	bf00      	nop
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007408:	b2db      	uxtb	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	2b02      	cmp	r3, #2
 800740e:	d81e      	bhi.n	800744e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	88db      	ldrh	r3, [r3, #6]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d004      	beq.n	8007422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8a5 	bl	800756a <USBD_CtlError>
        break;
 8007420:	e01a      	b.n	8007458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f043 0202 	orr.w	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	330c      	adds	r3, #12
 8007442:	2202      	movs	r2, #2
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f900 	bl	800764c <USBD_CtlSendData>
      break;
 800744c:	e004      	b.n	8007458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f88a 	bl	800756a <USBD_CtlError>
      break;
 8007456:	bf00      	nop
  }
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d107      	bne.n	8007482 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f940 	bl	8007700 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007480:	e013      	b.n	80074aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	885b      	ldrh	r3, [r3, #2]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d10b      	bne.n	80074a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	889b      	ldrh	r3, [r3, #4]
 800748e:	0a1b      	lsrs	r3, r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	b2da      	uxtb	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f930 	bl	8007700 <USBD_CtlSendStatus>
}
 80074a0:	e003      	b.n	80074aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f860 	bl	800756a <USBD_CtlError>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d80b      	bhi.n	80074e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10c      	bne.n	80074ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f910 	bl	8007700 <USBD_CtlSendStatus>
      }
      break;
 80074e0:	e004      	b.n	80074ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f840 	bl	800756a <USBD_CtlError>
      break;
 80074ea:	e000      	b.n	80074ee <USBD_ClrFeature+0x3c>
      break;
 80074ec:	bf00      	nop
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	781a      	ldrb	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff fa41 	bl	80069a8 <SWAPBYTE>
 8007526:	4603      	mov	r3, r0
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3301      	adds	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fa34 	bl	80069a8 <SWAPBYTE>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7ff fa27 	bl	80069a8 <SWAPBYTE>
 800755a:	4603      	mov	r3, r0
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	80da      	strh	r2, [r3, #6]
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007574:	2180      	movs	r1, #128	; 0x80
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fcd6 	bl	8007f28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800757c:	2100      	movs	r1, #0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fcd2 	bl	8007f28 <USBD_LL_StallEP>
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d036      	beq.n	8007610 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f000 f836 	bl	8007618 <USBD_GetLen>
 80075ac:	4603      	mov	r3, r0
 80075ae:	3301      	adds	r3, #1
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4413      	add	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	3301      	adds	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	2203      	movs	r2, #3
 80075d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	3301      	adds	r3, #1
 80075da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075dc:	e013      	b.n	8007606 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4413      	add	r3, r2
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3301      	adds	r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
    idx++;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	3301      	adds	r3, #1
 80075f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	4413      	add	r3, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	3301      	adds	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e7      	bne.n	80075de <USBD_GetString+0x52>
 800760e:	e000      	b.n	8007612 <USBD_GetString+0x86>
    return;
 8007610:	bf00      	nop
  }
}
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007628:	e005      	b.n	8007636 <USBD_GetLen+0x1e>
  {
    len++;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	3301      	adds	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3301      	adds	r3, #1
 8007634:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f5      	bne.n	800762a <USBD_GetLen+0x12>
  }

  return len;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2202      	movs	r2, #2
 800765c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	2100      	movs	r1, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fce1 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	2100      	movs	r1, #0
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fcd0 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2203      	movs	r2, #3
 80076b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fcd4 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	2100      	movs	r1, #0
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fcc3 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007710:	2300      	movs	r3, #0
 8007712:	2200      	movs	r2, #0
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc8f 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2205      	movs	r2, #5
 8007732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007736:	2300      	movs	r3, #0
 8007738:	2200      	movs	r2, #0
 800773a:	2100      	movs	r1, #0
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fc9d 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007750:	2200      	movs	r2, #0
 8007752:	4912      	ldr	r1, [pc, #72]	; (800779c <MX_USB_DEVICE_Init+0x50>)
 8007754:	4812      	ldr	r0, [pc, #72]	; (80077a0 <MX_USB_DEVICE_Init+0x54>)
 8007756:	f7fe fd01 	bl	800615c <USBD_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007760:	f7f9 f8f4 	bl	800094c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007764:	490f      	ldr	r1, [pc, #60]	; (80077a4 <MX_USB_DEVICE_Init+0x58>)
 8007766:	480e      	ldr	r0, [pc, #56]	; (80077a0 <MX_USB_DEVICE_Init+0x54>)
 8007768:	f7fe fd28 	bl	80061bc <USBD_RegisterClass>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007772:	f7f9 f8eb 	bl	800094c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007776:	490c      	ldr	r1, [pc, #48]	; (80077a8 <MX_USB_DEVICE_Init+0x5c>)
 8007778:	4809      	ldr	r0, [pc, #36]	; (80077a0 <MX_USB_DEVICE_Init+0x54>)
 800777a:	f7fe fc1f 	bl	8005fbc <USBD_CDC_RegisterInterface>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007784:	f7f9 f8e2 	bl	800094c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007788:	4805      	ldr	r0, [pc, #20]	; (80077a0 <MX_USB_DEVICE_Init+0x54>)
 800778a:	f7fe fd4d 	bl	8006228 <USBD_Start>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007794:	f7f9 f8da 	bl	800094c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007798:	bf00      	nop
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200000ac 	.word	0x200000ac
 80077a0:	20000278 	.word	0x20000278
 80077a4:	20000018 	.word	0x20000018
 80077a8:	20000098 	.word	0x20000098

080077ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077b0:	2200      	movs	r2, #0
 80077b2:	4905      	ldr	r1, [pc, #20]	; (80077c8 <CDC_Init_FS+0x1c>)
 80077b4:	4805      	ldr	r0, [pc, #20]	; (80077cc <CDC_Init_FS+0x20>)
 80077b6:	f7fe fc1b 	bl	8005ff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077ba:	4905      	ldr	r1, [pc, #20]	; (80077d0 <CDC_Init_FS+0x24>)
 80077bc:	4803      	ldr	r0, [pc, #12]	; (80077cc <CDC_Init_FS+0x20>)
 80077be:	f7fe fc39 	bl	8006034 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000954 	.word	0x20000954
 80077cc:	20000278 	.word	0x20000278
 80077d0:	20000554 	.word	0x20000554

080077d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077da:	4618      	mov	r0, r3
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	6039      	str	r1, [r7, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
 80077f0:	4613      	mov	r3, r2
 80077f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	2b23      	cmp	r3, #35	; 0x23
 80077f8:	d84a      	bhi.n	8007890 <CDC_Control_FS+0xac>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <CDC_Control_FS+0x1c>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007891 	.word	0x08007891
 8007804:	08007891 	.word	0x08007891
 8007808:	08007891 	.word	0x08007891
 800780c:	08007891 	.word	0x08007891
 8007810:	08007891 	.word	0x08007891
 8007814:	08007891 	.word	0x08007891
 8007818:	08007891 	.word	0x08007891
 800781c:	08007891 	.word	0x08007891
 8007820:	08007891 	.word	0x08007891
 8007824:	08007891 	.word	0x08007891
 8007828:	08007891 	.word	0x08007891
 800782c:	08007891 	.word	0x08007891
 8007830:	08007891 	.word	0x08007891
 8007834:	08007891 	.word	0x08007891
 8007838:	08007891 	.word	0x08007891
 800783c:	08007891 	.word	0x08007891
 8007840:	08007891 	.word	0x08007891
 8007844:	08007891 	.word	0x08007891
 8007848:	08007891 	.word	0x08007891
 800784c:	08007891 	.word	0x08007891
 8007850:	08007891 	.word	0x08007891
 8007854:	08007891 	.word	0x08007891
 8007858:	08007891 	.word	0x08007891
 800785c:	08007891 	.word	0x08007891
 8007860:	08007891 	.word	0x08007891
 8007864:	08007891 	.word	0x08007891
 8007868:	08007891 	.word	0x08007891
 800786c:	08007891 	.word	0x08007891
 8007870:	08007891 	.word	0x08007891
 8007874:	08007891 	.word	0x08007891
 8007878:	08007891 	.word	0x08007891
 800787c:	08007891 	.word	0x08007891
 8007880:	08007891 	.word	0x08007891
 8007884:	08007891 	.word	0x08007891
 8007888:	08007891 	.word	0x08007891
 800788c:	08007891 	.word	0x08007891
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007890:	bf00      	nop
  }

  return (USBD_OK);
 8007892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <CDC_Receive_FS+0x24>)
 80078ae:	f7fe fbc1 	bl	8006034 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078b2:	4804      	ldr	r0, [pc, #16]	; (80078c4 <CDC_Receive_FS+0x24>)
 80078b4:	f7fe fc1c 	bl	80060f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000278 	.word	0x20000278

080078c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <CDC_Transmit_FS+0x48>)
 80078da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e00b      	b.n	8007906 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078ee:	887b      	ldrh	r3, [r7, #2]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4806      	ldr	r0, [pc, #24]	; (8007910 <CDC_Transmit_FS+0x48>)
 80078f6:	f7fe fb7b 	bl	8005ff0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078fa:	4805      	ldr	r0, [pc, #20]	; (8007910 <CDC_Transmit_FS+0x48>)
 80078fc:	f7fe fbb8 	bl	8006070 <USBD_CDC_TransmitPacket>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000278 	.word	0x20000278

08007914 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800792a:	4618      	mov	r0, r3
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2212      	movs	r2, #18
 8007948:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800794a:	4b03      	ldr	r3, [pc, #12]	; (8007958 <USBD_FS_DeviceDescriptor+0x20>)
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	200000c8 	.word	0x200000c8

0800795c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2204      	movs	r2, #4
 800796c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800796e:	4b03      	ldr	r3, [pc, #12]	; (800797c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	200000dc 	.word	0x200000dc

08007980 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d105      	bne.n	800799e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4907      	ldr	r1, [pc, #28]	; (80079b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007996:	4808      	ldr	r0, [pc, #32]	; (80079b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007998:	f7ff fdf8 	bl	800758c <USBD_GetString>
 800799c:	e004      	b.n	80079a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4904      	ldr	r1, [pc, #16]	; (80079b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80079a4:	f7ff fdf2 	bl	800758c <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000d54 	.word	0x20000d54
 80079b8:	08008b30 	.word	0x08008b30

080079bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4904      	ldr	r1, [pc, #16]	; (80079dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079cc:	4804      	ldr	r0, [pc, #16]	; (80079e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079ce:	f7ff fddd 	bl	800758c <USBD_GetString>
  return USBD_StrDesc;
 80079d2:	4b02      	ldr	r3, [pc, #8]	; (80079dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20000d54 	.word	0x20000d54
 80079e0:	08008b44 	.word	0x08008b44

080079e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	221a      	movs	r2, #26
 80079f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079f6:	f000 f843 	bl	8007a80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079fa:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200000e0 	.word	0x200000e0

08007a08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	4907      	ldr	r1, [pc, #28]	; (8007a3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a1e:	4808      	ldr	r0, [pc, #32]	; (8007a40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a20:	f7ff fdb4 	bl	800758c <USBD_GetString>
 8007a24:	e004      	b.n	8007a30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4904      	ldr	r1, [pc, #16]	; (8007a3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a2a:	4805      	ldr	r0, [pc, #20]	; (8007a40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a2c:	f7ff fdae 	bl	800758c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000d54 	.word	0x20000d54
 8007a40:	08008b58 	.word	0x08008b58

08007a44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	6039      	str	r1, [r7, #0]
 8007a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4907      	ldr	r1, [pc, #28]	; (8007a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a5a:	4808      	ldr	r0, [pc, #32]	; (8007a7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a5c:	f7ff fd96 	bl	800758c <USBD_GetString>
 8007a60:	e004      	b.n	8007a6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4904      	ldr	r1, [pc, #16]	; (8007a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a66:	4805      	ldr	r0, [pc, #20]	; (8007a7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a68:	f7ff fd90 	bl	800758c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000d54 	.word	0x20000d54
 8007a7c:	08008b64 	.word	0x08008b64

08007a80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <Get_SerialNum+0x44>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <Get_SerialNum+0x48>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a92:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <Get_SerialNum+0x4c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	4909      	ldr	r1, [pc, #36]	; (8007ad0 <Get_SerialNum+0x50>)
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f814 	bl	8007ad8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	4908      	ldr	r1, [pc, #32]	; (8007ad4 <Get_SerialNum+0x54>)
 8007ab4:	68b8      	ldr	r0, [r7, #8]
 8007ab6:	f000 f80f 	bl	8007ad8 <IntToUnicode>
  }
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	1fff7a10 	.word	0x1fff7a10
 8007ac8:	1fff7a14 	.word	0x1fff7a14
 8007acc:	1fff7a18 	.word	0x1fff7a18
 8007ad0:	200000e2 	.word	0x200000e2
 8007ad4:	200000f2 	.word	0x200000f2

08007ad8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e027      	b.n	8007b40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	0f1b      	lsrs	r3, r3, #28
 8007af4:	2b09      	cmp	r3, #9
 8007af6:	d80b      	bhi.n	8007b10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	0f1b      	lsrs	r3, r3, #28
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4619      	mov	r1, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	440b      	add	r3, r1
 8007b08:	3230      	adds	r2, #48	; 0x30
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e00a      	b.n	8007b26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	0f1b      	lsrs	r3, r3, #28
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	440b      	add	r3, r1
 8007b20:	3237      	adds	r2, #55	; 0x37
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	3301      	adds	r3, #1
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]
 8007b40:	7dfa      	ldrb	r2, [r7, #23]
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d3d3      	bcc.n	8007af0 <IntToUnicode+0x18>
  }
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b60:	f107 0314 	add.w	r3, r7, #20
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	605a      	str	r2, [r3, #4]
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	60da      	str	r2, [r3, #12]
 8007b6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b78:	d13a      	bne.n	8007bf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b82:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	6313      	str	r3, [r2, #48]	; 0x30
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ba8:	230a      	movs	r3, #10
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bac:	f107 0314 	add.w	r3, r7, #20
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4812      	ldr	r0, [pc, #72]	; (8007bfc <HAL_PCD_MspInit+0xa4>)
 8007bb4:	f7f9 fd3c 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bb8:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	4a0e      	ldr	r2, [pc, #56]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	6353      	str	r3, [r2, #52]	; 0x34
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bd2:	6453      	str	r3, [r2, #68]	; 0x44
 8007bd4:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <HAL_PCD_MspInit+0xa0>)
 8007bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	2043      	movs	r0, #67	; 0x43
 8007be6:	f7f9 f97c 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bea:	2043      	movs	r0, #67	; 0x43
 8007bec:	f7f9 f995 	bl	8000f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	3728      	adds	r7, #40	; 0x28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	40020000 	.word	0x40020000

08007c00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe fb53 	bl	80062c2 <USBD_LL_SetupStage>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f7fe fb8d 	bl	800636c <USBD_LL_DataOutStage>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	3320      	adds	r3, #32
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	4619      	mov	r1, r3
 8007c82:	f7fe fc26 	bl	80064d2 <USBD_LL_DataInStage>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fd60 	bl	8006762 <USBD_LL_SOF>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	79db      	ldrb	r3, [r3, #7]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d001      	beq.n	8007cc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cbe:	f7f8 fe45 	bl	800094c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007cc8:	7bfa      	ldrb	r2, [r7, #15]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe fd04 	bl	80066da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fcac 	bl	8006636 <USBD_LL_Reset>
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fcff 	bl	80066fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7adb      	ldrb	r3, [r3, #11]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d1c:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <HAL_PCD_SuspendCallback+0x48>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	4a03      	ldr	r2, [pc, #12]	; (8007d30 <HAL_PCD_SuspendCallback+0x48>)
 8007d22:	f043 0306 	orr.w	r3, r3, #6
 8007d26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	e000ed00 	.word	0xe000ed00

08007d34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fcf5 	bl	8006732 <USBD_LL_Resume>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007d62:	78fa      	ldrb	r2, [r7, #3]
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fd4d 	bl	8006806 <USBD_LL_IsoOUTIncomplete>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fd09 	bl	80067a2 <USBD_LL_IsoINIncomplete>
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd5f 	bl	800686a <USBD_LL_DevConnected>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fd5c 	bl	8006880 <USBD_LL_DevDisconnected>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d13c      	bne.n	8007e5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007de0:	4a20      	ldr	r2, [pc, #128]	; (8007e64 <USBD_LL_Init+0x94>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <USBD_LL_Init+0x94>)
 8007dec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007df0:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <USBD_LL_Init+0x94>)
 8007df2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007df6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007df8:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <USBD_LL_Init+0x94>)
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dfe:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e00:	2202      	movs	r2, #2
 8007e02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e04:	4b17      	ldr	r3, [pc, #92]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e0a:	4b16      	ldr	r3, [pc, #88]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e10:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e1c:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e2e:	480d      	ldr	r0, [pc, #52]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e30:	f7f9 fdb5 	bl	800199e <HAL_PCD_Init>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e3a:	f7f8 fd87 	bl	800094c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	4808      	ldr	r0, [pc, #32]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e42:	f7fa ffe0 	bl	8002e06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e46:	2240      	movs	r2, #64	; 0x40
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4806      	ldr	r0, [pc, #24]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e4c:	f7fa ff94 	bl	8002d78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e50:	2280      	movs	r2, #128	; 0x80
 8007e52:	2101      	movs	r1, #1
 8007e54:	4803      	ldr	r0, [pc, #12]	; (8007e64 <USBD_LL_Init+0x94>)
 8007e56:	f7fa ff8f 	bl	8002d78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000f54 	.word	0x20000f54

08007e68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f9 fe9c 	bl	8001bbc <HAL_PCD_Start>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f942 	bl	8008114 <USBD_Get_USB_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	70fb      	strb	r3, [r7, #3]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70bb      	strb	r3, [r7, #2]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ec6:	78bb      	ldrb	r3, [r7, #2]
 8007ec8:	883a      	ldrh	r2, [r7, #0]
 8007eca:	78f9      	ldrb	r1, [r7, #3]
 8007ecc:	f7fa fb70 	bl	80025b0 <HAL_PCD_EP_Open>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f91c 	bl	8008114 <USBD_Get_USB_Status>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fa fbb9 	bl	8002680 <HAL_PCD_EP_Close>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f8fd 	bl	8008114 <USBD_Get_USB_Status>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa fc71 	bl	800282e <HAL_PCD_EP_SetStall>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f8de 	bl	8008114 <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fa fcb5 	bl	80028f4 <HAL_PCD_EP_ClrStall>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f8bf 	bl	8008114 <USBD_Get_USB_Status>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	da0b      	bge.n	8007fd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3316      	adds	r3, #22
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	e00b      	b.n	8007ff0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007fee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f7fa faa4 	bl	8002568 <HAL_PCD_SetAddress>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f874 	bl	8008114 <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	460b      	mov	r3, r1
 8008048:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008058:	7af9      	ldrb	r1, [r7, #11]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f7fa fbac 	bl	80027ba <HAL_PCD_EP_Transmit>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f853 	bl	8008114 <USBD_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008072:	7dbb      	ldrb	r3, [r7, #22]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	460b      	mov	r3, r1
 800808a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800809a:	7af9      	ldrb	r1, [r7, #11]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	f7fa fb38 	bl	8002714 <HAL_PCD_EP_Receive>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f832 	bl	8008114 <USBD_Get_USB_Status>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fa fb58 	bl	800278a <HAL_PCD_EP_GetRxCount>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080ec:	4b03      	ldr	r3, [pc, #12]	; (80080fc <USBD_static_malloc+0x18>)
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20001438 	.word	0x20001438

08008100 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d817      	bhi.n	8008158 <USBD_Get_USB_Status+0x44>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <USBD_Get_USB_Status+0x1c>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008141 	.word	0x08008141
 8008134:	08008147 	.word	0x08008147
 8008138:	0800814d 	.word	0x0800814d
 800813c:	08008153 	.word	0x08008153
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
    break;
 8008144:	e00b      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
    break;
 800814a:	e008      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e005      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e002      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	bf00      	nop
  }
  return usb_status;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <sniprintf>:
 800816c:	b40c      	push	{r2, r3}
 800816e:	b530      	push	{r4, r5, lr}
 8008170:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <sniprintf+0x64>)
 8008172:	1e0c      	subs	r4, r1, #0
 8008174:	681d      	ldr	r5, [r3, #0]
 8008176:	b09d      	sub	sp, #116	; 0x74
 8008178:	da08      	bge.n	800818c <sniprintf+0x20>
 800817a:	238b      	movs	r3, #139	; 0x8b
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008182:	b01d      	add	sp, #116	; 0x74
 8008184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008188:	b002      	add	sp, #8
 800818a:	4770      	bx	lr
 800818c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008194:	bf14      	ite	ne
 8008196:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800819a:	4623      	moveq	r3, r4
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	9307      	str	r3, [sp, #28]
 80081a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081a4:	9002      	str	r0, [sp, #8]
 80081a6:	9006      	str	r0, [sp, #24]
 80081a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081ae:	ab21      	add	r3, sp, #132	; 0x84
 80081b0:	a902      	add	r1, sp, #8
 80081b2:	4628      	mov	r0, r5
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f000 f993 	bl	80084e0 <_svfiprintf_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	bfbc      	itt	lt
 80081be:	238b      	movlt	r3, #139	; 0x8b
 80081c0:	602b      	strlt	r3, [r5, #0]
 80081c2:	2c00      	cmp	r4, #0
 80081c4:	d0dd      	beq.n	8008182 <sniprintf+0x16>
 80081c6:	9b02      	ldr	r3, [sp, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e7d9      	b.n	8008182 <sniprintf+0x16>
 80081ce:	bf00      	nop
 80081d0:	20000148 	.word	0x20000148

080081d4 <memset>:
 80081d4:	4402      	add	r2, r0
 80081d6:	4603      	mov	r3, r0
 80081d8:	4293      	cmp	r3, r2
 80081da:	d100      	bne.n	80081de <memset+0xa>
 80081dc:	4770      	bx	lr
 80081de:	f803 1b01 	strb.w	r1, [r3], #1
 80081e2:	e7f9      	b.n	80081d8 <memset+0x4>

080081e4 <__errno>:
 80081e4:	4b01      	ldr	r3, [pc, #4]	; (80081ec <__errno+0x8>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000148 	.word	0x20000148

080081f0 <__libc_init_array>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4d0d      	ldr	r5, [pc, #52]	; (8008228 <__libc_init_array+0x38>)
 80081f4:	4c0d      	ldr	r4, [pc, #52]	; (800822c <__libc_init_array+0x3c>)
 80081f6:	1b64      	subs	r4, r4, r5
 80081f8:	10a4      	asrs	r4, r4, #2
 80081fa:	2600      	movs	r6, #0
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	d109      	bne.n	8008214 <__libc_init_array+0x24>
 8008200:	4d0b      	ldr	r5, [pc, #44]	; (8008230 <__libc_init_array+0x40>)
 8008202:	4c0c      	ldr	r4, [pc, #48]	; (8008234 <__libc_init_array+0x44>)
 8008204:	f000 fc6a 	bl	8008adc <_init>
 8008208:	1b64      	subs	r4, r4, r5
 800820a:	10a4      	asrs	r4, r4, #2
 800820c:	2600      	movs	r6, #0
 800820e:	42a6      	cmp	r6, r4
 8008210:	d105      	bne.n	800821e <__libc_init_array+0x2e>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	f855 3b04 	ldr.w	r3, [r5], #4
 8008218:	4798      	blx	r3
 800821a:	3601      	adds	r6, #1
 800821c:	e7ee      	b.n	80081fc <__libc_init_array+0xc>
 800821e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008222:	4798      	blx	r3
 8008224:	3601      	adds	r6, #1
 8008226:	e7f2      	b.n	800820e <__libc_init_array+0x1e>
 8008228:	08008bd0 	.word	0x08008bd0
 800822c:	08008bd0 	.word	0x08008bd0
 8008230:	08008bd0 	.word	0x08008bd0
 8008234:	08008bd4 	.word	0x08008bd4

08008238 <__retarget_lock_acquire_recursive>:
 8008238:	4770      	bx	lr

0800823a <__retarget_lock_release_recursive>:
 800823a:	4770      	bx	lr

0800823c <_free_r>:
 800823c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823e:	2900      	cmp	r1, #0
 8008240:	d044      	beq.n	80082cc <_free_r+0x90>
 8008242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008246:	9001      	str	r0, [sp, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f1a1 0404 	sub.w	r4, r1, #4
 800824e:	bfb8      	it	lt
 8008250:	18e4      	addlt	r4, r4, r3
 8008252:	f000 f8df 	bl	8008414 <__malloc_lock>
 8008256:	4a1e      	ldr	r2, [pc, #120]	; (80082d0 <_free_r+0x94>)
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	b933      	cbnz	r3, 800826c <_free_r+0x30>
 800825e:	6063      	str	r3, [r4, #4]
 8008260:	6014      	str	r4, [r2, #0]
 8008262:	b003      	add	sp, #12
 8008264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008268:	f000 b8da 	b.w	8008420 <__malloc_unlock>
 800826c:	42a3      	cmp	r3, r4
 800826e:	d908      	bls.n	8008282 <_free_r+0x46>
 8008270:	6825      	ldr	r5, [r4, #0]
 8008272:	1961      	adds	r1, r4, r5
 8008274:	428b      	cmp	r3, r1
 8008276:	bf01      	itttt	eq
 8008278:	6819      	ldreq	r1, [r3, #0]
 800827a:	685b      	ldreq	r3, [r3, #4]
 800827c:	1949      	addeq	r1, r1, r5
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	e7ed      	b.n	800825e <_free_r+0x22>
 8008282:	461a      	mov	r2, r3
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	b10b      	cbz	r3, 800828c <_free_r+0x50>
 8008288:	42a3      	cmp	r3, r4
 800828a:	d9fa      	bls.n	8008282 <_free_r+0x46>
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	1855      	adds	r5, r2, r1
 8008290:	42a5      	cmp	r5, r4
 8008292:	d10b      	bne.n	80082ac <_free_r+0x70>
 8008294:	6824      	ldr	r4, [r4, #0]
 8008296:	4421      	add	r1, r4
 8008298:	1854      	adds	r4, r2, r1
 800829a:	42a3      	cmp	r3, r4
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	d1e0      	bne.n	8008262 <_free_r+0x26>
 80082a0:	681c      	ldr	r4, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	6053      	str	r3, [r2, #4]
 80082a6:	440c      	add	r4, r1
 80082a8:	6014      	str	r4, [r2, #0]
 80082aa:	e7da      	b.n	8008262 <_free_r+0x26>
 80082ac:	d902      	bls.n	80082b4 <_free_r+0x78>
 80082ae:	230c      	movs	r3, #12
 80082b0:	6003      	str	r3, [r0, #0]
 80082b2:	e7d6      	b.n	8008262 <_free_r+0x26>
 80082b4:	6825      	ldr	r5, [r4, #0]
 80082b6:	1961      	adds	r1, r4, r5
 80082b8:	428b      	cmp	r3, r1
 80082ba:	bf04      	itt	eq
 80082bc:	6819      	ldreq	r1, [r3, #0]
 80082be:	685b      	ldreq	r3, [r3, #4]
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	bf04      	itt	eq
 80082c4:	1949      	addeq	r1, r1, r5
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	6054      	str	r4, [r2, #4]
 80082ca:	e7ca      	b.n	8008262 <_free_r+0x26>
 80082cc:	b003      	add	sp, #12
 80082ce:	bd30      	pop	{r4, r5, pc}
 80082d0:	20001798 	.word	0x20001798

080082d4 <sbrk_aligned>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4e0e      	ldr	r6, [pc, #56]	; (8008310 <sbrk_aligned+0x3c>)
 80082d8:	460c      	mov	r4, r1
 80082da:	6831      	ldr	r1, [r6, #0]
 80082dc:	4605      	mov	r5, r0
 80082de:	b911      	cbnz	r1, 80082e6 <sbrk_aligned+0x12>
 80082e0:	f000 fba6 	bl	8008a30 <_sbrk_r>
 80082e4:	6030      	str	r0, [r6, #0]
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 fba1 	bl	8008a30 <_sbrk_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d00a      	beq.n	8008308 <sbrk_aligned+0x34>
 80082f2:	1cc4      	adds	r4, r0, #3
 80082f4:	f024 0403 	bic.w	r4, r4, #3
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d007      	beq.n	800830c <sbrk_aligned+0x38>
 80082fc:	1a21      	subs	r1, r4, r0
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 fb96 	bl	8008a30 <_sbrk_r>
 8008304:	3001      	adds	r0, #1
 8008306:	d101      	bne.n	800830c <sbrk_aligned+0x38>
 8008308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	2000179c 	.word	0x2000179c

08008314 <_malloc_r>:
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	1ccd      	adds	r5, r1, #3
 800831a:	f025 0503 	bic.w	r5, r5, #3
 800831e:	3508      	adds	r5, #8
 8008320:	2d0c      	cmp	r5, #12
 8008322:	bf38      	it	cc
 8008324:	250c      	movcc	r5, #12
 8008326:	2d00      	cmp	r5, #0
 8008328:	4607      	mov	r7, r0
 800832a:	db01      	blt.n	8008330 <_malloc_r+0x1c>
 800832c:	42a9      	cmp	r1, r5
 800832e:	d905      	bls.n	800833c <_malloc_r+0x28>
 8008330:	230c      	movs	r3, #12
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	2600      	movs	r6, #0
 8008336:	4630      	mov	r0, r6
 8008338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008410 <_malloc_r+0xfc>
 8008340:	f000 f868 	bl	8008414 <__malloc_lock>
 8008344:	f8d8 3000 	ldr.w	r3, [r8]
 8008348:	461c      	mov	r4, r3
 800834a:	bb5c      	cbnz	r4, 80083a4 <_malloc_r+0x90>
 800834c:	4629      	mov	r1, r5
 800834e:	4638      	mov	r0, r7
 8008350:	f7ff ffc0 	bl	80082d4 <sbrk_aligned>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	4604      	mov	r4, r0
 8008358:	d155      	bne.n	8008406 <_malloc_r+0xf2>
 800835a:	f8d8 4000 	ldr.w	r4, [r8]
 800835e:	4626      	mov	r6, r4
 8008360:	2e00      	cmp	r6, #0
 8008362:	d145      	bne.n	80083f0 <_malloc_r+0xdc>
 8008364:	2c00      	cmp	r4, #0
 8008366:	d048      	beq.n	80083fa <_malloc_r+0xe6>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	4631      	mov	r1, r6
 800836c:	4638      	mov	r0, r7
 800836e:	eb04 0903 	add.w	r9, r4, r3
 8008372:	f000 fb5d 	bl	8008a30 <_sbrk_r>
 8008376:	4581      	cmp	r9, r0
 8008378:	d13f      	bne.n	80083fa <_malloc_r+0xe6>
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	1a6d      	subs	r5, r5, r1
 800837e:	4629      	mov	r1, r5
 8008380:	4638      	mov	r0, r7
 8008382:	f7ff ffa7 	bl	80082d4 <sbrk_aligned>
 8008386:	3001      	adds	r0, #1
 8008388:	d037      	beq.n	80083fa <_malloc_r+0xe6>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	442b      	add	r3, r5
 800838e:	6023      	str	r3, [r4, #0]
 8008390:	f8d8 3000 	ldr.w	r3, [r8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d038      	beq.n	800840a <_malloc_r+0xf6>
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	42a2      	cmp	r2, r4
 800839c:	d12b      	bne.n	80083f6 <_malloc_r+0xe2>
 800839e:	2200      	movs	r2, #0
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	e00f      	b.n	80083c4 <_malloc_r+0xb0>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	1b52      	subs	r2, r2, r5
 80083a8:	d41f      	bmi.n	80083ea <_malloc_r+0xd6>
 80083aa:	2a0b      	cmp	r2, #11
 80083ac:	d917      	bls.n	80083de <_malloc_r+0xca>
 80083ae:	1961      	adds	r1, r4, r5
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	6025      	str	r5, [r4, #0]
 80083b4:	bf18      	it	ne
 80083b6:	6059      	strne	r1, [r3, #4]
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	bf08      	it	eq
 80083bc:	f8c8 1000 	streq.w	r1, [r8]
 80083c0:	5162      	str	r2, [r4, r5]
 80083c2:	604b      	str	r3, [r1, #4]
 80083c4:	4638      	mov	r0, r7
 80083c6:	f104 060b 	add.w	r6, r4, #11
 80083ca:	f000 f829 	bl	8008420 <__malloc_unlock>
 80083ce:	f026 0607 	bic.w	r6, r6, #7
 80083d2:	1d23      	adds	r3, r4, #4
 80083d4:	1af2      	subs	r2, r6, r3
 80083d6:	d0ae      	beq.n	8008336 <_malloc_r+0x22>
 80083d8:	1b9b      	subs	r3, r3, r6
 80083da:	50a3      	str	r3, [r4, r2]
 80083dc:	e7ab      	b.n	8008336 <_malloc_r+0x22>
 80083de:	42a3      	cmp	r3, r4
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	d1dd      	bne.n	80083a0 <_malloc_r+0x8c>
 80083e4:	f8c8 2000 	str.w	r2, [r8]
 80083e8:	e7ec      	b.n	80083c4 <_malloc_r+0xb0>
 80083ea:	4623      	mov	r3, r4
 80083ec:	6864      	ldr	r4, [r4, #4]
 80083ee:	e7ac      	b.n	800834a <_malloc_r+0x36>
 80083f0:	4634      	mov	r4, r6
 80083f2:	6876      	ldr	r6, [r6, #4]
 80083f4:	e7b4      	b.n	8008360 <_malloc_r+0x4c>
 80083f6:	4613      	mov	r3, r2
 80083f8:	e7cc      	b.n	8008394 <_malloc_r+0x80>
 80083fa:	230c      	movs	r3, #12
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	4638      	mov	r0, r7
 8008400:	f000 f80e 	bl	8008420 <__malloc_unlock>
 8008404:	e797      	b.n	8008336 <_malloc_r+0x22>
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	e7dc      	b.n	80083c4 <_malloc_r+0xb0>
 800840a:	605b      	str	r3, [r3, #4]
 800840c:	deff      	udf	#255	; 0xff
 800840e:	bf00      	nop
 8008410:	20001798 	.word	0x20001798

08008414 <__malloc_lock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_lock+0x8>)
 8008416:	f7ff bf0f 	b.w	8008238 <__retarget_lock_acquire_recursive>
 800841a:	bf00      	nop
 800841c:	20001794 	.word	0x20001794

08008420 <__malloc_unlock>:
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <__malloc_unlock+0x8>)
 8008422:	f7ff bf0a 	b.w	800823a <__retarget_lock_release_recursive>
 8008426:	bf00      	nop
 8008428:	20001794 	.word	0x20001794

0800842c <__ssputs_r>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	688e      	ldr	r6, [r1, #8]
 8008432:	461f      	mov	r7, r3
 8008434:	42be      	cmp	r6, r7
 8008436:	680b      	ldr	r3, [r1, #0]
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	d82c      	bhi.n	800849a <__ssputs_r+0x6e>
 8008440:	898a      	ldrh	r2, [r1, #12]
 8008442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008446:	d026      	beq.n	8008496 <__ssputs_r+0x6a>
 8008448:	6965      	ldr	r5, [r4, #20]
 800844a:	6909      	ldr	r1, [r1, #16]
 800844c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008450:	eba3 0901 	sub.w	r9, r3, r1
 8008454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008458:	1c7b      	adds	r3, r7, #1
 800845a:	444b      	add	r3, r9
 800845c:	106d      	asrs	r5, r5, #1
 800845e:	429d      	cmp	r5, r3
 8008460:	bf38      	it	cc
 8008462:	461d      	movcc	r5, r3
 8008464:	0553      	lsls	r3, r2, #21
 8008466:	d527      	bpl.n	80084b8 <__ssputs_r+0x8c>
 8008468:	4629      	mov	r1, r5
 800846a:	f7ff ff53 	bl	8008314 <_malloc_r>
 800846e:	4606      	mov	r6, r0
 8008470:	b360      	cbz	r0, 80084cc <__ssputs_r+0xa0>
 8008472:	6921      	ldr	r1, [r4, #16]
 8008474:	464a      	mov	r2, r9
 8008476:	f000 faeb 	bl	8008a50 <memcpy>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	6126      	str	r6, [r4, #16]
 8008488:	6165      	str	r5, [r4, #20]
 800848a:	444e      	add	r6, r9
 800848c:	eba5 0509 	sub.w	r5, r5, r9
 8008490:	6026      	str	r6, [r4, #0]
 8008492:	60a5      	str	r5, [r4, #8]
 8008494:	463e      	mov	r6, r7
 8008496:	42be      	cmp	r6, r7
 8008498:	d900      	bls.n	800849c <__ssputs_r+0x70>
 800849a:	463e      	mov	r6, r7
 800849c:	6820      	ldr	r0, [r4, #0]
 800849e:	4632      	mov	r2, r6
 80084a0:	4641      	mov	r1, r8
 80084a2:	f000 faab 	bl	80089fc <memmove>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	1b9b      	subs	r3, r3, r6
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	4433      	add	r3, r6
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	2000      	movs	r0, #0
 80084b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b8:	462a      	mov	r2, r5
 80084ba:	f000 fad7 	bl	8008a6c <_realloc_r>
 80084be:	4606      	mov	r6, r0
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1e0      	bne.n	8008486 <__ssputs_r+0x5a>
 80084c4:	6921      	ldr	r1, [r4, #16]
 80084c6:	4650      	mov	r0, sl
 80084c8:	f7ff feb8 	bl	800823c <_free_r>
 80084cc:	230c      	movs	r3, #12
 80084ce:	f8ca 3000 	str.w	r3, [sl]
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084de:	e7e9      	b.n	80084b4 <__ssputs_r+0x88>

080084e0 <_svfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4698      	mov	r8, r3
 80084e6:	898b      	ldrh	r3, [r1, #12]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	b09d      	sub	sp, #116	; 0x74
 80084ec:	4607      	mov	r7, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	4614      	mov	r4, r2
 80084f2:	d50e      	bpl.n	8008512 <_svfiprintf_r+0x32>
 80084f4:	690b      	ldr	r3, [r1, #16]
 80084f6:	b963      	cbnz	r3, 8008512 <_svfiprintf_r+0x32>
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	f7ff ff0b 	bl	8008314 <_malloc_r>
 80084fe:	6028      	str	r0, [r5, #0]
 8008500:	6128      	str	r0, [r5, #16]
 8008502:	b920      	cbnz	r0, 800850e <_svfiprintf_r+0x2e>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850c:	e0d0      	b.n	80086b0 <_svfiprintf_r+0x1d0>
 800850e:	2340      	movs	r3, #64	; 0x40
 8008510:	616b      	str	r3, [r5, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	9309      	str	r3, [sp, #36]	; 0x24
 8008516:	2320      	movs	r3, #32
 8008518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086c8 <_svfiprintf_r+0x1e8>
 8008526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852a:	f04f 0901 	mov.w	r9, #1
 800852e:	4623      	mov	r3, r4
 8008530:	469a      	mov	sl, r3
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	b10a      	cbz	r2, 800853c <_svfiprintf_r+0x5c>
 8008538:	2a25      	cmp	r2, #37	; 0x25
 800853a:	d1f9      	bne.n	8008530 <_svfiprintf_r+0x50>
 800853c:	ebba 0b04 	subs.w	fp, sl, r4
 8008540:	d00b      	beq.n	800855a <_svfiprintf_r+0x7a>
 8008542:	465b      	mov	r3, fp
 8008544:	4622      	mov	r2, r4
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff6f 	bl	800842c <__ssputs_r>
 800854e:	3001      	adds	r0, #1
 8008550:	f000 80a9 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008556:	445a      	add	r2, fp
 8008558:	9209      	str	r2, [sp, #36]	; 0x24
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80a1 	beq.w	80086a6 <_svfiprintf_r+0x1c6>
 8008564:	2300      	movs	r3, #0
 8008566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856e:	f10a 0a01 	add.w	sl, sl, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857a:	931a      	str	r3, [sp, #104]	; 0x68
 800857c:	4654      	mov	r4, sl
 800857e:	2205      	movs	r2, #5
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	4850      	ldr	r0, [pc, #320]	; (80086c8 <_svfiprintf_r+0x1e8>)
 8008586:	f7f7 fe33 	bl	80001f0 <memchr>
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	b9d8      	cbnz	r0, 80085c6 <_svfiprintf_r+0xe6>
 800858e:	06d0      	lsls	r0, r2, #27
 8008590:	bf44      	itt	mi
 8008592:	2320      	movmi	r3, #32
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008598:	0711      	lsls	r1, r2, #28
 800859a:	bf44      	itt	mi
 800859c:	232b      	movmi	r3, #43	; 0x2b
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b2a      	cmp	r3, #42	; 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xf6>
 80085aa:	9a07      	ldr	r2, [sp, #28]
 80085ac:	4654      	mov	r4, sl
 80085ae:	2000      	movs	r0, #0
 80085b0:	f04f 0c0a 	mov.w	ip, #10
 80085b4:	4621      	mov	r1, r4
 80085b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d94d      	bls.n	800865c <_svfiprintf_r+0x17c>
 80085c0:	b1b0      	cbz	r0, 80085f0 <_svfiprintf_r+0x110>
 80085c2:	9207      	str	r2, [sp, #28]
 80085c4:	e014      	b.n	80085f0 <_svfiprintf_r+0x110>
 80085c6:	eba0 0308 	sub.w	r3, r0, r8
 80085ca:	fa09 f303 	lsl.w	r3, r9, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	46a2      	mov	sl, r4
 80085d4:	e7d2      	b.n	800857c <_svfiprintf_r+0x9c>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbb      	ittet	lt
 80085e2:	425b      	neglt	r3, r3
 80085e4:	f042 0202 	orrlt.w	r2, r2, #2
 80085e8:	9307      	strge	r3, [sp, #28]
 80085ea:	9307      	strlt	r3, [sp, #28]
 80085ec:	bfb8      	it	lt
 80085ee:	9204      	strlt	r2, [sp, #16]
 80085f0:	7823      	ldrb	r3, [r4, #0]
 80085f2:	2b2e      	cmp	r3, #46	; 0x2e
 80085f4:	d10c      	bne.n	8008610 <_svfiprintf_r+0x130>
 80085f6:	7863      	ldrb	r3, [r4, #1]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d134      	bne.n	8008666 <_svfiprintf_r+0x186>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9203      	str	r2, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb8      	it	lt
 8008608:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800860c:	3402      	adds	r4, #2
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086d8 <_svfiprintf_r+0x1f8>
 8008614:	7821      	ldrb	r1, [r4, #0]
 8008616:	2203      	movs	r2, #3
 8008618:	4650      	mov	r0, sl
 800861a:	f7f7 fde9 	bl	80001f0 <memchr>
 800861e:	b138      	cbz	r0, 8008630 <_svfiprintf_r+0x150>
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	eba0 000a 	sub.w	r0, r0, sl
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	4082      	lsls	r2, r0
 800862a:	4313      	orrs	r3, r2
 800862c:	3401      	adds	r4, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4825      	ldr	r0, [pc, #148]	; (80086cc <_svfiprintf_r+0x1ec>)
 8008636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863a:	2206      	movs	r2, #6
 800863c:	f7f7 fdd8 	bl	80001f0 <memchr>
 8008640:	2800      	cmp	r0, #0
 8008642:	d038      	beq.n	80086b6 <_svfiprintf_r+0x1d6>
 8008644:	4b22      	ldr	r3, [pc, #136]	; (80086d0 <_svfiprintf_r+0x1f0>)
 8008646:	bb1b      	cbnz	r3, 8008690 <_svfiprintf_r+0x1b0>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	3307      	adds	r3, #7
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008656:	4433      	add	r3, r6
 8008658:	9309      	str	r3, [sp, #36]	; 0x24
 800865a:	e768      	b.n	800852e <_svfiprintf_r+0x4e>
 800865c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008660:	460c      	mov	r4, r1
 8008662:	2001      	movs	r0, #1
 8008664:	e7a6      	b.n	80085b4 <_svfiprintf_r+0xd4>
 8008666:	2300      	movs	r3, #0
 8008668:	3401      	adds	r4, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	4619      	mov	r1, r3
 800866e:	f04f 0c0a 	mov.w	ip, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008678:	3a30      	subs	r2, #48	; 0x30
 800867a:	2a09      	cmp	r2, #9
 800867c:	d903      	bls.n	8008686 <_svfiprintf_r+0x1a6>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c6      	beq.n	8008610 <_svfiprintf_r+0x130>
 8008682:	9105      	str	r1, [sp, #20]
 8008684:	e7c4      	b.n	8008610 <_svfiprintf_r+0x130>
 8008686:	fb0c 2101 	mla	r1, ip, r1, r2
 800868a:	4604      	mov	r4, r0
 800868c:	2301      	movs	r3, #1
 800868e:	e7f0      	b.n	8008672 <_svfiprintf_r+0x192>
 8008690:	ab03      	add	r3, sp, #12
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	462a      	mov	r2, r5
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <_svfiprintf_r+0x1f4>)
 8008698:	a904      	add	r1, sp, #16
 800869a:	4638      	mov	r0, r7
 800869c:	f3af 8000 	nop.w
 80086a0:	1c42      	adds	r2, r0, #1
 80086a2:	4606      	mov	r6, r0
 80086a4:	d1d6      	bne.n	8008654 <_svfiprintf_r+0x174>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	065b      	lsls	r3, r3, #25
 80086aa:	f53f af2d 	bmi.w	8008508 <_svfiprintf_r+0x28>
 80086ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b0:	b01d      	add	sp, #116	; 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_svfiprintf_r+0x1f4>)
 80086be:	a904      	add	r1, sp, #16
 80086c0:	4638      	mov	r0, r7
 80086c2:	f000 f879 	bl	80087b8 <_printf_i>
 80086c6:	e7eb      	b.n	80086a0 <_svfiprintf_r+0x1c0>
 80086c8:	08008b94 	.word	0x08008b94
 80086cc:	08008b9e 	.word	0x08008b9e
 80086d0:	00000000 	.word	0x00000000
 80086d4:	0800842d 	.word	0x0800842d
 80086d8:	08008b9a 	.word	0x08008b9a

080086dc <_printf_common>:
 80086dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	4616      	mov	r6, r2
 80086e2:	4699      	mov	r9, r3
 80086e4:	688a      	ldr	r2, [r1, #8]
 80086e6:	690b      	ldr	r3, [r1, #16]
 80086e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	bfb8      	it	lt
 80086f0:	4613      	movlt	r3, r2
 80086f2:	6033      	str	r3, [r6, #0]
 80086f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086f8:	4607      	mov	r7, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	b10a      	cbz	r2, 8008702 <_printf_common+0x26>
 80086fe:	3301      	adds	r3, #1
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	0699      	lsls	r1, r3, #26
 8008706:	bf42      	ittt	mi
 8008708:	6833      	ldrmi	r3, [r6, #0]
 800870a:	3302      	addmi	r3, #2
 800870c:	6033      	strmi	r3, [r6, #0]
 800870e:	6825      	ldr	r5, [r4, #0]
 8008710:	f015 0506 	ands.w	r5, r5, #6
 8008714:	d106      	bne.n	8008724 <_printf_common+0x48>
 8008716:	f104 0a19 	add.w	sl, r4, #25
 800871a:	68e3      	ldr	r3, [r4, #12]
 800871c:	6832      	ldr	r2, [r6, #0]
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	42ab      	cmp	r3, r5
 8008722:	dc26      	bgt.n	8008772 <_printf_common+0x96>
 8008724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008728:	1e13      	subs	r3, r2, #0
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	bf18      	it	ne
 800872e:	2301      	movne	r3, #1
 8008730:	0692      	lsls	r2, r2, #26
 8008732:	d42b      	bmi.n	800878c <_printf_common+0xb0>
 8008734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008738:	4649      	mov	r1, r9
 800873a:	4638      	mov	r0, r7
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d01e      	beq.n	8008780 <_printf_common+0xa4>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	f003 0306 	and.w	r3, r3, #6
 800874a:	2b04      	cmp	r3, #4
 800874c:	bf02      	ittt	eq
 800874e:	68e5      	ldreq	r5, [r4, #12]
 8008750:	6833      	ldreq	r3, [r6, #0]
 8008752:	1aed      	subeq	r5, r5, r3
 8008754:	68a3      	ldr	r3, [r4, #8]
 8008756:	bf0c      	ite	eq
 8008758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800875c:	2500      	movne	r5, #0
 800875e:	4293      	cmp	r3, r2
 8008760:	bfc4      	itt	gt
 8008762:	1a9b      	subgt	r3, r3, r2
 8008764:	18ed      	addgt	r5, r5, r3
 8008766:	2600      	movs	r6, #0
 8008768:	341a      	adds	r4, #26
 800876a:	42b5      	cmp	r5, r6
 800876c:	d11a      	bne.n	80087a4 <_printf_common+0xc8>
 800876e:	2000      	movs	r0, #0
 8008770:	e008      	b.n	8008784 <_printf_common+0xa8>
 8008772:	2301      	movs	r3, #1
 8008774:	4652      	mov	r2, sl
 8008776:	4649      	mov	r1, r9
 8008778:	4638      	mov	r0, r7
 800877a:	47c0      	blx	r8
 800877c:	3001      	adds	r0, #1
 800877e:	d103      	bne.n	8008788 <_printf_common+0xac>
 8008780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008788:	3501      	adds	r5, #1
 800878a:	e7c6      	b.n	800871a <_printf_common+0x3e>
 800878c:	18e1      	adds	r1, r4, r3
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	2030      	movs	r0, #48	; 0x30
 8008792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008796:	4422      	add	r2, r4
 8008798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800879c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087a0:	3302      	adds	r3, #2
 80087a2:	e7c7      	b.n	8008734 <_printf_common+0x58>
 80087a4:	2301      	movs	r3, #1
 80087a6:	4622      	mov	r2, r4
 80087a8:	4649      	mov	r1, r9
 80087aa:	4638      	mov	r0, r7
 80087ac:	47c0      	blx	r8
 80087ae:	3001      	adds	r0, #1
 80087b0:	d0e6      	beq.n	8008780 <_printf_common+0xa4>
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7d9      	b.n	800876a <_printf_common+0x8e>
	...

080087b8 <_printf_i>:
 80087b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087bc:	7e0f      	ldrb	r7, [r1, #24]
 80087be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087c0:	2f78      	cmp	r7, #120	; 0x78
 80087c2:	4691      	mov	r9, r2
 80087c4:	4680      	mov	r8, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	469a      	mov	sl, r3
 80087ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ce:	d807      	bhi.n	80087e0 <_printf_i+0x28>
 80087d0:	2f62      	cmp	r7, #98	; 0x62
 80087d2:	d80a      	bhi.n	80087ea <_printf_i+0x32>
 80087d4:	2f00      	cmp	r7, #0
 80087d6:	f000 80d4 	beq.w	8008982 <_printf_i+0x1ca>
 80087da:	2f58      	cmp	r7, #88	; 0x58
 80087dc:	f000 80c0 	beq.w	8008960 <_printf_i+0x1a8>
 80087e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087e8:	e03a      	b.n	8008860 <_printf_i+0xa8>
 80087ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ee:	2b15      	cmp	r3, #21
 80087f0:	d8f6      	bhi.n	80087e0 <_printf_i+0x28>
 80087f2:	a101      	add	r1, pc, #4	; (adr r1, 80087f8 <_printf_i+0x40>)
 80087f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f8:	08008851 	.word	0x08008851
 80087fc:	08008865 	.word	0x08008865
 8008800:	080087e1 	.word	0x080087e1
 8008804:	080087e1 	.word	0x080087e1
 8008808:	080087e1 	.word	0x080087e1
 800880c:	080087e1 	.word	0x080087e1
 8008810:	08008865 	.word	0x08008865
 8008814:	080087e1 	.word	0x080087e1
 8008818:	080087e1 	.word	0x080087e1
 800881c:	080087e1 	.word	0x080087e1
 8008820:	080087e1 	.word	0x080087e1
 8008824:	08008969 	.word	0x08008969
 8008828:	08008891 	.word	0x08008891
 800882c:	08008923 	.word	0x08008923
 8008830:	080087e1 	.word	0x080087e1
 8008834:	080087e1 	.word	0x080087e1
 8008838:	0800898b 	.word	0x0800898b
 800883c:	080087e1 	.word	0x080087e1
 8008840:	08008891 	.word	0x08008891
 8008844:	080087e1 	.word	0x080087e1
 8008848:	080087e1 	.word	0x080087e1
 800884c:	0800892b 	.word	0x0800892b
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	1d1a      	adds	r2, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	602a      	str	r2, [r5, #0]
 8008858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800885c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008860:	2301      	movs	r3, #1
 8008862:	e09f      	b.n	80089a4 <_printf_i+0x1ec>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	0607      	lsls	r7, r0, #24
 800886a:	f103 0104 	add.w	r1, r3, #4
 800886e:	6029      	str	r1, [r5, #0]
 8008870:	d501      	bpl.n	8008876 <_printf_i+0xbe>
 8008872:	681e      	ldr	r6, [r3, #0]
 8008874:	e003      	b.n	800887e <_printf_i+0xc6>
 8008876:	0646      	lsls	r6, r0, #25
 8008878:	d5fb      	bpl.n	8008872 <_printf_i+0xba>
 800887a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800887e:	2e00      	cmp	r6, #0
 8008880:	da03      	bge.n	800888a <_printf_i+0xd2>
 8008882:	232d      	movs	r3, #45	; 0x2d
 8008884:	4276      	negs	r6, r6
 8008886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800888a:	485a      	ldr	r0, [pc, #360]	; (80089f4 <_printf_i+0x23c>)
 800888c:	230a      	movs	r3, #10
 800888e:	e012      	b.n	80088b6 <_printf_i+0xfe>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	6029      	str	r1, [r5, #0]
 8008898:	0605      	lsls	r5, r0, #24
 800889a:	d501      	bpl.n	80088a0 <_printf_i+0xe8>
 800889c:	681e      	ldr	r6, [r3, #0]
 800889e:	e002      	b.n	80088a6 <_printf_i+0xee>
 80088a0:	0641      	lsls	r1, r0, #25
 80088a2:	d5fb      	bpl.n	800889c <_printf_i+0xe4>
 80088a4:	881e      	ldrh	r6, [r3, #0]
 80088a6:	4853      	ldr	r0, [pc, #332]	; (80089f4 <_printf_i+0x23c>)
 80088a8:	2f6f      	cmp	r7, #111	; 0x6f
 80088aa:	bf0c      	ite	eq
 80088ac:	2308      	moveq	r3, #8
 80088ae:	230a      	movne	r3, #10
 80088b0:	2100      	movs	r1, #0
 80088b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088b6:	6865      	ldr	r5, [r4, #4]
 80088b8:	60a5      	str	r5, [r4, #8]
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	bfa2      	ittt	ge
 80088be:	6821      	ldrge	r1, [r4, #0]
 80088c0:	f021 0104 	bicge.w	r1, r1, #4
 80088c4:	6021      	strge	r1, [r4, #0]
 80088c6:	b90e      	cbnz	r6, 80088cc <_printf_i+0x114>
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	d04b      	beq.n	8008964 <_printf_i+0x1ac>
 80088cc:	4615      	mov	r5, r2
 80088ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80088d2:	fb03 6711 	mls	r7, r3, r1, r6
 80088d6:	5dc7      	ldrb	r7, [r0, r7]
 80088d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088dc:	4637      	mov	r7, r6
 80088de:	42bb      	cmp	r3, r7
 80088e0:	460e      	mov	r6, r1
 80088e2:	d9f4      	bls.n	80088ce <_printf_i+0x116>
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d10b      	bne.n	8008900 <_printf_i+0x148>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	07de      	lsls	r6, r3, #31
 80088ec:	d508      	bpl.n	8008900 <_printf_i+0x148>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	6861      	ldr	r1, [r4, #4]
 80088f2:	4299      	cmp	r1, r3
 80088f4:	bfde      	ittt	le
 80088f6:	2330      	movle	r3, #48	; 0x30
 80088f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008900:	1b52      	subs	r2, r2, r5
 8008902:	6122      	str	r2, [r4, #16]
 8008904:	f8cd a000 	str.w	sl, [sp]
 8008908:	464b      	mov	r3, r9
 800890a:	aa03      	add	r2, sp, #12
 800890c:	4621      	mov	r1, r4
 800890e:	4640      	mov	r0, r8
 8008910:	f7ff fee4 	bl	80086dc <_printf_common>
 8008914:	3001      	adds	r0, #1
 8008916:	d14a      	bne.n	80089ae <_printf_i+0x1f6>
 8008918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800891c:	b004      	add	sp, #16
 800891e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	f043 0320 	orr.w	r3, r3, #32
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	4833      	ldr	r0, [pc, #204]	; (80089f8 <_printf_i+0x240>)
 800892c:	2778      	movs	r7, #120	; 0x78
 800892e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	6829      	ldr	r1, [r5, #0]
 8008936:	061f      	lsls	r7, r3, #24
 8008938:	f851 6b04 	ldr.w	r6, [r1], #4
 800893c:	d402      	bmi.n	8008944 <_printf_i+0x18c>
 800893e:	065f      	lsls	r7, r3, #25
 8008940:	bf48      	it	mi
 8008942:	b2b6      	uxthmi	r6, r6
 8008944:	07df      	lsls	r7, r3, #31
 8008946:	bf48      	it	mi
 8008948:	f043 0320 	orrmi.w	r3, r3, #32
 800894c:	6029      	str	r1, [r5, #0]
 800894e:	bf48      	it	mi
 8008950:	6023      	strmi	r3, [r4, #0]
 8008952:	b91e      	cbnz	r6, 800895c <_printf_i+0x1a4>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	f023 0320 	bic.w	r3, r3, #32
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	2310      	movs	r3, #16
 800895e:	e7a7      	b.n	80088b0 <_printf_i+0xf8>
 8008960:	4824      	ldr	r0, [pc, #144]	; (80089f4 <_printf_i+0x23c>)
 8008962:	e7e4      	b.n	800892e <_printf_i+0x176>
 8008964:	4615      	mov	r5, r2
 8008966:	e7bd      	b.n	80088e4 <_printf_i+0x12c>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	6826      	ldr	r6, [r4, #0]
 800896c:	6961      	ldr	r1, [r4, #20]
 800896e:	1d18      	adds	r0, r3, #4
 8008970:	6028      	str	r0, [r5, #0]
 8008972:	0635      	lsls	r5, r6, #24
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	d501      	bpl.n	800897c <_printf_i+0x1c4>
 8008978:	6019      	str	r1, [r3, #0]
 800897a:	e002      	b.n	8008982 <_printf_i+0x1ca>
 800897c:	0670      	lsls	r0, r6, #25
 800897e:	d5fb      	bpl.n	8008978 <_printf_i+0x1c0>
 8008980:	8019      	strh	r1, [r3, #0]
 8008982:	2300      	movs	r3, #0
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	4615      	mov	r5, r2
 8008988:	e7bc      	b.n	8008904 <_printf_i+0x14c>
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	1d1a      	adds	r2, r3, #4
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	681d      	ldr	r5, [r3, #0]
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	2100      	movs	r1, #0
 8008996:	4628      	mov	r0, r5
 8008998:	f7f7 fc2a 	bl	80001f0 <memchr>
 800899c:	b108      	cbz	r0, 80089a2 <_printf_i+0x1ea>
 800899e:	1b40      	subs	r0, r0, r5
 80089a0:	6060      	str	r0, [r4, #4]
 80089a2:	6863      	ldr	r3, [r4, #4]
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	2300      	movs	r3, #0
 80089a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ac:	e7aa      	b.n	8008904 <_printf_i+0x14c>
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4649      	mov	r1, r9
 80089b4:	4640      	mov	r0, r8
 80089b6:	47d0      	blx	sl
 80089b8:	3001      	adds	r0, #1
 80089ba:	d0ad      	beq.n	8008918 <_printf_i+0x160>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	079b      	lsls	r3, r3, #30
 80089c0:	d413      	bmi.n	80089ea <_printf_i+0x232>
 80089c2:	68e0      	ldr	r0, [r4, #12]
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	4298      	cmp	r0, r3
 80089c8:	bfb8      	it	lt
 80089ca:	4618      	movlt	r0, r3
 80089cc:	e7a6      	b.n	800891c <_printf_i+0x164>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4632      	mov	r2, r6
 80089d2:	4649      	mov	r1, r9
 80089d4:	4640      	mov	r0, r8
 80089d6:	47d0      	blx	sl
 80089d8:	3001      	adds	r0, #1
 80089da:	d09d      	beq.n	8008918 <_printf_i+0x160>
 80089dc:	3501      	adds	r5, #1
 80089de:	68e3      	ldr	r3, [r4, #12]
 80089e0:	9903      	ldr	r1, [sp, #12]
 80089e2:	1a5b      	subs	r3, r3, r1
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	dcf2      	bgt.n	80089ce <_printf_i+0x216>
 80089e8:	e7eb      	b.n	80089c2 <_printf_i+0x20a>
 80089ea:	2500      	movs	r5, #0
 80089ec:	f104 0619 	add.w	r6, r4, #25
 80089f0:	e7f5      	b.n	80089de <_printf_i+0x226>
 80089f2:	bf00      	nop
 80089f4:	08008ba5 	.word	0x08008ba5
 80089f8:	08008bb6 	.word	0x08008bb6

080089fc <memmove>:
 80089fc:	4288      	cmp	r0, r1
 80089fe:	b510      	push	{r4, lr}
 8008a00:	eb01 0402 	add.w	r4, r1, r2
 8008a04:	d902      	bls.n	8008a0c <memmove+0x10>
 8008a06:	4284      	cmp	r4, r0
 8008a08:	4623      	mov	r3, r4
 8008a0a:	d807      	bhi.n	8008a1c <memmove+0x20>
 8008a0c:	1e43      	subs	r3, r0, #1
 8008a0e:	42a1      	cmp	r1, r4
 8008a10:	d008      	beq.n	8008a24 <memmove+0x28>
 8008a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1a:	e7f8      	b.n	8008a0e <memmove+0x12>
 8008a1c:	4402      	add	r2, r0
 8008a1e:	4601      	mov	r1, r0
 8008a20:	428a      	cmp	r2, r1
 8008a22:	d100      	bne.n	8008a26 <memmove+0x2a>
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a2e:	e7f7      	b.n	8008a20 <memmove+0x24>

08008a30 <_sbrk_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d06      	ldr	r5, [pc, #24]	; (8008a4c <_sbrk_r+0x1c>)
 8008a34:	2300      	movs	r3, #0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	f7f8 f86e 	bl	8000b1c <_sbrk>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_sbrk_r+0x1a>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_sbrk_r+0x1a>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	20001790 	.word	0x20001790

08008a50 <memcpy>:
 8008a50:	440a      	add	r2, r1
 8008a52:	4291      	cmp	r1, r2
 8008a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008a58:	d100      	bne.n	8008a5c <memcpy+0xc>
 8008a5a:	4770      	bx	lr
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a66:	4291      	cmp	r1, r2
 8008a68:	d1f9      	bne.n	8008a5e <memcpy+0xe>
 8008a6a:	bd10      	pop	{r4, pc}

08008a6c <_realloc_r>:
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	4680      	mov	r8, r0
 8008a72:	4614      	mov	r4, r2
 8008a74:	460e      	mov	r6, r1
 8008a76:	b921      	cbnz	r1, 8008a82 <_realloc_r+0x16>
 8008a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	f7ff bc49 	b.w	8008314 <_malloc_r>
 8008a82:	b92a      	cbnz	r2, 8008a90 <_realloc_r+0x24>
 8008a84:	f7ff fbda 	bl	800823c <_free_r>
 8008a88:	4625      	mov	r5, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a90:	f000 f81b 	bl	8008aca <_malloc_usable_size_r>
 8008a94:	4284      	cmp	r4, r0
 8008a96:	4607      	mov	r7, r0
 8008a98:	d802      	bhi.n	8008aa0 <_realloc_r+0x34>
 8008a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a9e:	d812      	bhi.n	8008ac6 <_realloc_r+0x5a>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	f7ff fc36 	bl	8008314 <_malloc_r>
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0ed      	beq.n	8008a8a <_realloc_r+0x1e>
 8008aae:	42bc      	cmp	r4, r7
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	bf28      	it	cs
 8008ab6:	463a      	movcs	r2, r7
 8008ab8:	f7ff ffca 	bl	8008a50 <memcpy>
 8008abc:	4631      	mov	r1, r6
 8008abe:	4640      	mov	r0, r8
 8008ac0:	f7ff fbbc 	bl	800823c <_free_r>
 8008ac4:	e7e1      	b.n	8008a8a <_realloc_r+0x1e>
 8008ac6:	4635      	mov	r5, r6
 8008ac8:	e7df      	b.n	8008a8a <_realloc_r+0x1e>

08008aca <_malloc_usable_size_r>:
 8008aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ace:	1f18      	subs	r0, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	bfbc      	itt	lt
 8008ad4:	580b      	ldrlt	r3, [r1, r0]
 8008ad6:	18c0      	addlt	r0, r0, r3
 8008ad8:	4770      	bx	lr
	...

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
